{
  "contentVersion": "1.0.0.0",
  "parameters": {
    "workbookDisplayName": {
      "type": "string",
      "defaultValue": "Microsoft Defender for Cloud Server Monitoring Dashboard",
      "metadata": {
        "description": "The friendly name for the workbook that is used in the Gallery or Saved List.  This name must be unique within a resource group."
      }
    },
    "workbookType": {
      "type": "string",
      "defaultValue": "workbook",
      "metadata": {
        "description": "The gallery that the workbook will been shown under. Supported values include workbook, tsg, etc. Usually, this is 'workbook'"
      }
    },
    "workbookSourceId": {
      "type": "string",
      "defaultValue": "Azure Security Center",
      "metadata": {
        "description": "The id of resource instance to which the workbook will be associated"
      }
    },
    "workbookId": {
      "type": "string",
      "defaultValue": "[newGuid()]",
      "metadata": {
        "description": "The unique guid for this workbook instance"
      }
    }
  },
  "variables": {
    "workbookContent": {
      "version": "Notebook/1.0",
      "items": [
        {
          "type": 12,
          "content": {
            "version": "NotebookGroup/1.0",
            "groupType": "editable",
            "title": "Introduction",
            "items": [
              {
                "type": 1,
                "content": {
                  "json": "# Microsoft Defender for Cloud - Server Monitoring Dashboard\nMicrosoft Defender for Servers and Microsoft Defender for SQL rely on several aspects for a machine to be considered as being *monitored*, which means that Defender for Cloud will always be able to gather threat evidence to create security alerts:\n1. A Log Analytics agent needs to be installed on a machine (Azure VM or non-Azure machine connected through Azure Arc). \n2. The Log Analytics agent needs to be reporting to its Log Analytics workspace.\n3. The machine (Azure VM or non-Azure machine connected through Azure Arc) needs to be protected by *Microsoft Defender for Servers*, which means that the plan has been enabled on both, the machine's Azure subscription and the Log Analytics workspace the agent is reporting to.\n4. The workspace which the machine is reporting to needs to have the Defender for Servers or Defender for SQL plan enabled.\n\nThis workbook will help you visualize machines which are protected by Microsoft Defender for Cloud and have an agent installed, but which do not properly report to their workspace, or if the workspace does not have the plan enabled. It will leverage data from both, Log Analytics workspaces and Azure Resource Graph, depending on the selections you make in the filters below.\n\n\n<svg viewBox=\"0 0 19 19\" width=\"20\" class=\"fxt-escapeShadow\" role=\"presentation\" focusable=\"false\" xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" aria-hidden=\"true\"><g><path fill=\"#1b93eb\" d=\"M16.82 8.886c0 4.81-5.752 8.574-7.006 9.411a.477.477 0 01-.523 0C8.036 17.565 2.18 13.7 2.18 8.886V3.135a.451.451 0 01.42-.419C7.2 2.612 6.154.625 9.5.625s2.3 1.987 6.8 2.091a.479.479 0 01.523.419z\"></path><path fill=\"url(#0024423711759027356)\" d=\"M16.192 8.99c0 4.392-5.333 7.947-6.483 8.575a.319.319 0 01-.418 0c-1.15-.732-6.483-4.183-6.483-8.575V3.762a.575.575 0 01.313-.523C7.2 3.135 6.258 1.357 9.4 1.357s2.2 1.882 6.274 1.882a.45.45 0 01.419.418z\"></path><path d=\"M9.219 5.378a.313.313 0 01.562 0l.875 1.772a.314.314 0 00.236.172l1.957.284a.314.314 0 01.174.535l-1.416 1.38a.312.312 0 00-.09.278l.334 1.949a.313.313 0 01-.455.33l-1.75-.92a.314.314 0 00-.292 0l-1.75.92a.313.313 0 01-.455-.33L7.483 9.8a.312.312 0 00-.09-.278L5.977 8.141a.314.314 0 01.174-.535l1.957-.284a.314.314 0 00.236-.172z\" class=\"msportalfx-svg-c01\"></path></g></svg>&nbsp;<span style=\"font-family: Open Sans; font-weight: 620; font-size: 14px;font-style: bold;margin:-10px 0px 0px 0px;position: relative;top:-3px;left:-4px;\"> Please take the time to answer a quick survey. To submit your feedback,\n</span>[<span style=\"font-family: Open Sans; font-weight: 620; font-size: 14px;font-style: bold;margin:-10px 0px 0px 0px;position: relative;top:-3px;left:-4px;\"> click here. </span>](https://aka.ms/MDFCServerMonitoringSurvey)"
                },
                "name": "text - 1"
              },
              {
                "type": 1,
                "content": {
                  "json": "Please select one, several, or all subscriptions and Log Analytics workspaces in your environment in the drop downs below, so the workbook can access relevant data to visualize.",
                  "style": "info"
                },
                "conditionalVisibility": {
                  "parameterName": "workspace",
                  "comparison": "isEqualTo"
                },
                "name": "text - 2"
              },
              {
                "type": 9,
                "content": {
                  "version": "KqlParameterItem/1.0",
                  "parameters": [
                    {
                      "id": "d6f374fd-9c17-41eb-a647-b15cf5b981ba",
                      "version": "KqlParameterItem/1.0",
                      "name": "subscriptions",
                      "label": "Subscription",
                      "type": 6,
                      "isRequired": true,
                      "multiSelect": true,
                      "quote": "'",
                      "delimiter": ",",
                      "typeSettings": {
                        "additionalResourceOptions": [
                          "value::all"
                        ],
                        "includeAll": true
                      },
                      "timeContext": {
                        "durationMs": 86400000
                      },
                      "value": [
                        "value::all"
                      ]
                    },
                    {
                      "id": "da8690b8-7771-4759-bf1b-a6f29093aaf5",
                      "version": "KqlParameterItem/1.0",
                      "name": "workspace",
                      "label": "Log Analytics Workspace",
                      "type": 5,
                      "isRequired": true,
                      "multiSelect": true,
                      "quote": "'",
                      "delimiter": ",",
                      "query": "resources\n| where type =~ 'microsoft.operationalinsights/workspaces'\n| project id",
                      "crossComponentResources": [
                        "{subscriptions}"
                      ],
                      "typeSettings": {
                        "additionalResourceOptions": [
                          "value::all"
                        ],
                        "showDefault": false
                      },
                      "queryType": 1,
                      "resourceType": "microsoft.resourcegraph/resources",
                      "value": [
                        "value::all"
                      ]
                    }
                  ],
                  "style": "pills",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces"
                },
                "name": "parameters - 3"
              }
            ],
            "exportParameters": true
          },
          "name": "group - 0"
        },
        {
          "type": 11,
          "content": {
            "version": "LinkItem/1.0",
            "style": "tabs",
            "links": [
              {
                "id": "8666e136-a028-4ed7-9d57-c2f9120e9227",
                "cellValue": "SelectedTab",
                "linkTarget": "parameter",
                "linkLabel": "Overview",
                "subTarget": "OverviewTab",
                "style": "link"
              },
              {
                "id": "1d91d475-88d6-47ab-b8ec-7c1be397a31d",
                "cellValue": "SelectedTab",
                "linkTarget": "parameter",
                "linkLabel": "Log Analytics workspace status",
                "subTarget": "LogAnalyticsTab",
                "style": "link"
              },
              {
                "id": "491d0551-fb7d-4c2d-8ca2-dc4fb99e128d",
                "cellValue": "SelectedTab",
                "linkTarget": "parameter",
                "linkLabel": "Security status",
                "subTarget": "SecurityTab",
                "style": "link"
              }
            ]
          },
          "name": "links - 4"
        },
        {
          "type": 12,
          "content": {
            "version": "NotebookGroup/1.0",
            "groupType": "editable",
            "items": [
              {
                "type": 1,
                "content": {
                  "json": "## Overview\nIn this section, you see the current status of all Azure VMs and Azure Arc machines connected to your subscriptions and Log Analytics workspaces as selected.\n\nThe first chart shows the Log Analytics Agent installation status as reported by Microsoft Defender for Cloud.\nIn the second chart, you see the current Log Analytics Agent reporting status of your machines. Machines that are sending current heartbeat information within the last 15 minutes are considered as *currently reporting*.\nThe third chart shows the status of Microsoft Defender for Cloud plans on subscriptions as reported by the Defender for Cloud inventory."
                },
                "name": "text - 5"
              },
              {
                "type": 1,
                "content": {
                  "json": "The total number of machines in the pie charts below may vary as the *Machine reporting status* dashboard will only show machines that have been reporting within the last 30 days, whereas the other two dashboards will show all machines that are covered by Microsoft Defender for Cloud and have an agent installed. This will include machines that have been powered off for more than 30 days but which have not been deleted.\n\nTo see more details, please select **one** value at a time from each of the charts below.",
                  "style": "info"
                },
                "name": "text - 5"
              },
              {
                "type": 3,
                "content": {
                  "version": "KqlItem/1.0",
                  "query": "securityresources\n| where type =~ \"microsoft.security/assessments\" or type =~ \"microsoft.security/softwareInventories\"\n| extend assessmentStatusCode = case(type =~ \"microsoft.security/assessments\", tostring(properties.status.code), \"\")\n| extend severity = case(assessmentStatusCode =~ \"unhealthy\", tolower(tostring(properties.metadata.severity)), tolower(assessmentStatusCode))\n| extend exemptionType = case(tolower(type) != \"microsoft.security/assessments\",\"N/A\", case(properties.status.cause =~ \"exempt\", \"Yes\", \"No\"))\n| extend source = case(type =~ \"microsoft.security/assessments\", tostring(properties.resourceDetails.Source), \"\")\n| extend stringUntilWorkspaces = extract(\"^(.+)/(.+)/onPremiseMachines/(.+)/providers/Microsoft.Security/assessments/.+$\",1,id)\n| extend resourceId = trim(\" \", tolower(tostring(case(source =~ \"azure\", properties.resourceDetails.Id,\n                                                                            source =~ \"aws\" and isnotempty(tostring(properties.resourceDetails.ConnectorId)), properties.resourceDetails.Id,\n                                                                            source =~ \"aws\", properties.resourceDetails.AzureResourceId,\n                                                                            source =~ \"gcp\", properties.resourceDetails.AzureResourceId,\n                                                                            source =~ \"onpremise\", strcat(stringUntilWorkspaces,\"/workspaceNamePlaceholder/onPremiseMachines/\",properties.resourceDetails.MachineName,\"_\",properties.resourceDetails.VMUUID),\n                                                                            type =~ \"microsoft.security/assessments\", extract(\"^(.+)/providers/Microsoft.Security/assessments/.+$\",1,id),extract(\"^(.+)/providers/Microsoft.Security/softwareInventories/.+$\",1,id)))))\n| extend resourceName = iff(source =~ \"aws\" and isnotempty(tostring(properties.resourceDetails.ConnectorId)), tostring(properties.additionalData.ResourceName), extract(@\"(.+)/(.+)\", 2, resourceId))\n| extend regexResourceId = extract_all(@\"/providers/([^/]+)(?:/([^/]+)/[^/]+(?:/([^/]+)/[^/]+)?)?/([^/]+)/[^/]+$\", resourceId)\n| extend RegexResourceType = regexResourceId[0]\n| extend mainType = RegexResourceType[1], extendedType = RegexResourceType[2], resourceType = RegexResourceType[3]\n| extend providerName = RegexResourceType[0],\n                        mainType = case(mainType !~ \"\", strcat(\"/\",mainType), \"\"),\n                        extendedType = case(extendedType!~ \"\", strcat(\"/\",extendedType), \"\"),\n                        resourceType = case(resourceType!~ \"\", strcat(\"/\",resourceType), \"\")\n| extend array = split(resourceId, '/')\n| extend typeFullPath = case(\n                    array_length(array) == 3, 'subscription',\n                    array_length(array) == 5, 'resourcegroups',\n                    source =~ \"aws\" and isnotempty(tostring(properties.resourceDetails.ConnectorId)), tolower(strcat(providerName, mainType, \"/\", tostring(properties.additionalData.ResourceProvider), tostring(properties.additionalData.ResourceType))),\n                    strcat(providerName, mainType, extendedType, resourceType))\n| extend resourceType = case(typeFullPath =~ 'resourcegroups' or typeFullPath =~ 'subscription', typeFullPath, tolower(trim(\"/\", resourceType)))\n| extend assessmentKey = case(type =~ \"microsoft.security/assessments\", tostring(name), \"\")\n| extend softwareVendorName = case(type =~ \"microsoft.security/softwareInventories\", tostring(properties.vendor), \"\")\n| extend softwareName = case(type =~ \"microsoft.security/softwareInventories\", tostring(properties.softwareName), \"\")\n| extend softwareVersion = case(type =~ \"microsoft.security/softwareInventories\", tostring(properties.version), \"\")\n| extend softwareNameIdentifier = case(type =~ \"microsoft.security/softwareInventories\", strcat(softwareVendorName, \",\", softwareName, \",\", softwareVersion), \"\")\n| extend environment = case(type =~ \"microsoft.security/assessments\", properties.resourceDetails[\"Source\"], \"\")\n| extend environment = case(environment =~ \"onpremise\", tolower(\"Non-Azure\"), tolower(environment))\n| extend osTypeProperty = properties.additionalData[\"OS Type\"]\n| extend osType = case(isnotempty(osTypeProperty), osTypeProperty, \"\")\n| extend hasAgent = case(assessmentKey == \"d1db3318-01ff-16de-29eb-28b344515626\" or assessmentKey == \"45cfe080-ceb1-a91e-9743-71551ed24e94\" or assessmentKey == \"720a3e77-0b9a-4fa9-98b6-ddf0fd7e32c1\" or assessmentKey == \"27ac71b1-75c5-41c2-adc2-858f5db45b08\", assessmentStatusCode, \"\")\n| extend hasAgent = case(((assessmentKey == \"4ab6e3c5-74dd-8b35-9ab9-f61b30875b27\" or assessmentKey == \"181ac480-f7c4-544b-9865-11b8ffe87f47\" or assessmentKey == \"4fb67663-9ab9-475d-b026-8c544cced439\") and (typeFullPath in ('microsoft.hybridcompute/machines', 'microsoft.kubernetes/connectedclusters'))) , \"healthy\", hasAgent)\n| extend workspaceAzureResourceId = case(hasAgent !~ \"\", properties.additionalData[\"Reporting workspace azure id\"], \"\")\n| extend workspaceName = case(workspaceAzureResourceId !~ \"\", extract(@\"(.+)/(.+)\", 2, workspaceAzureResourceId), \"\")\n| extend assessmentDisplayName = case(type =~ \"microsoft.security/assessments\", case(isnotempty(properties.displayName), properties.displayName, properties.metadata.displayName), \"\")\n| extend assessmentIdentifier = case(type =~ \"microsoft.security/assessments\", strcat(assessmentKey, \",\" , assessmentDisplayName, \",\", severity), \"\")\n| summarize assessmentsCount = count() , assessmentsIdentifier = make_list(assessmentIdentifier), softwareNamesIdentifier = make_list(softwareNameIdentifier), hasAgent = max(hasAgent), workspaceName = max(workspaceName), environment = max(environment), osType = max(osType), exemptionType = max(exemptionType)  by resourceId, subscriptionId, resourceName, resourceType, typeFullPath, severity\n| extend packAssessments = pack(severity, assessmentsCount)\n| summarize assessmentsSummary = make_bag(packAssessments), assessmentsIdentifier = make_set(assessmentsIdentifier), softwareNamesIdentifier = make_set(softwareNamesIdentifier), hasAgent = max(hasAgent), workspaceName= max(workspaceName), environment = max(environment), osType= max(osType), exemptionType = max(exemptionType)  by resourceId, subscriptionId, resourceName, resourceType, typeFullPath\n| extend agentMonitoring = case(hasAgent =~ \"NotApplicable\" or hasAgent =~ \"\", '',\n                                                hasAgent =~ \"Unhealthy\", \"notInstalled\",\n                                                \"installed\")\n| join kind=leftouter (\n                    securityresources\n| where type =~ \"microsoft.security/pricings\"\n| project subscriptionId, bundleName = tolower(name), freeTrialRemainingTime = properties.freeTrialRemainingTime, pricingTier = tolower(properties.pricingTier)\n| extend bundlesPricing = pack(bundleName, pricingTier)\n| summarize subscriptionPricing = make_bag(bundlesPricing) by subscriptionId\n                ) on subscriptionId\n| extend hasNoSoftwareData = case(array_length(softwareNamesIdentifier) == 1, case(set_has_element(softwareNamesIdentifier, \"\"), true, false), false)\n| extend softwareNamesIdentifier = case(hasNoSoftwareData, softwareNamesIdentifier, set_difference(softwareNamesIdentifier, pack_array(\"\")))\n| extend AssessmentsHigh = case(isnull(assessmentsSummary.high), 0 , toint(assessmentsSummary.high))\n| extend AssessmentsMedium = case(isnull(assessmentsSummary.medium), 0 , toint(assessmentsSummary.medium))\n| extend AssessmentsLow = case(isnull(assessmentsSummary.low), 0 , toint(assessmentsSummary.low))\n| extend unhealthyAssessmentsCount = AssessmentsHigh + AssessmentsMedium + AssessmentsLow\n| extend virtualmachines = case(isnull(subscriptionPricing), '' , subscriptionPricing.virtualmachines)\n| extend virtualmachines = case(virtualmachines == 'free', 'off', 'on')\n| extend sqlservers = case(isnull(subscriptionPricing), '' , subscriptionPricing.sqlservers)\n| extend sqlservers = case(sqlservers == 'free', 'off', 'on')\n| extend kubernetesservice = case(isnull(subscriptionPricing), '' , subscriptionPricing.kubernetesservice)\n| extend kubernetesservice = case(kubernetesservice == 'free', 'off', 'on')\n| extend containerregistry = case(isnull(subscriptionPricing), '' , subscriptionPricing.containerregistry)\n| extend containerregistry = case(containerregistry == 'free', 'off', 'on')\n| extend connectedcontainerregistry = case(isnull(subscriptionPricing), '' , subscriptionPricing.connectedcontainerregistry)\n| extend connectedcontainerregistry = case(connectedcontainerregistry == 'free', 'off', 'on')\n| extend sqlservervirtualmachines = case(isnull(subscriptionPricing), '' , subscriptionPricing.sqlservervirtualmachines)\n| extend sqlservervirtualmachines = case(sqlservervirtualmachines == 'free', 'off', 'on')\n| extend appservices = case(isnull(subscriptionPricing), '' , subscriptionPricing.appservices)\n| extend appservices = case(appservices == 'free', 'off', 'on')\n| extend storageaccounts = case(isnull(subscriptionPricing), '' , subscriptionPricing.storageaccounts)\n| extend storageaccounts = case(storageaccounts == 'free', 'off', 'on')\n| extend keyvaults = case(isnull(subscriptionPricing), '' , subscriptionPricing.keyvaults)\n| extend keyvaults = case(keyvaults == 'free', 'off', 'on')\n| extend opensourcerelationaldatabases = case(isnull(subscriptionPricing), '' , subscriptionPricing.opensourcerelationaldatabases)\n| extend opensourcerelationaldatabases = case(opensourcerelationaldatabases == 'free', 'off', 'on')\n| extend calculatedSubscriptionPricing = case(resourceType =~ \"subscription\" and isempty(subscriptionPricing) == false , iff(subscriptionPricing has \"free\" and subscriptionPricing has \"standard\", \"partial\", iff(subscriptionPricing has \"free\", \"off\", \"on\")), \"\")\n| extend resourcePricing = case(typeFullPath =~ \"microsoft.classiccompute/virtualmachines\", virtualmachines, typeFullPath =~ \"microsoft.compute/virtualmachines\", virtualmachines, typeFullPath =~ \"microsoft.hybridcompute/machines\", virtualmachines, typeFullPath =~ \"microsoft.sql/servers\", sqlservers, typeFullPath =~ \"microsoft.containerservice/managedclusters\", kubernetesservice, typeFullPath =~ \"microsoft.kubernetes/connectedclusters\", kubernetesservice, typeFullPath =~ \"microsoft.containerregistry/registries\", containerregistry, typeFullPath =~ \"microsoft.security/connectedcontainerregistries\", connectedcontainerregistry, typeFullPath =~ \"microsoft.sqlvirtualmachine/sqlvirtualmachines\", sqlservervirtualmachines, typeFullPath =~ \"microsoft.web/sites\", appservices, typeFullPath =~ \"microsoft.storage/storageaccounts\", storageaccounts, typeFullPath =~ \"microsoft.compute/virtualmachinescalesets\", virtualmachines, typeFullPath =~ \"microsoft.keyvault/vaults\", keyvaults, typeFullPath =~ \"microsoft.dbforpostgresql/servers\", opensourcerelationaldatabases, typeFullPath =~ \"microsoft.dbformysql/servers\", opensourcerelationaldatabases, typeFullPath =~ \"microsoft.dbformariadb/servers\", opensourcerelationaldatabases, calculatedSubscriptionPricing)\n| extend pricing = case(resourceType =~ \"subscription\" , calculatedSubscriptionPricing , resourcePricing)\n| extend selectedSoftware = \"\"\n| project resourceType, exemptionType, typeFullPath, resourceId, resourceName, subscriptionId, environment, osType, workspaceName, agentMonitoring, assessmentsIdentifier, assessmentsSummary, subscriptionPricing, unhealthyAssessmentsCount, pricing, softwareNamesIdentifier, selectedSoftware\n| extend resourceGroup = tolower(tostring(split(resourceId, \"/\")[4]))\n| order by unhealthyAssessmentsCount, subscriptionId, resourceType, resourceId\n| where typeFullPath in ('microsoft.compute/virtualmachines', 'microsoft.hybridcompute/machines')\n| where isnotempty(resourceId)\n| summarize dcount(resourceId) by agentMonitoring",
                  "size": 3,
                  "title": "Log Analytics Agent status",
                  "exportFieldName": "",
                  "exportParameterName": "agentInstallStatus",
                  "queryType": 1,
                  "resourceType": "microsoft.resourcegraph/resources",
                  "crossComponentResources": [
                    "{subscriptions}"
                  ],
                  "visualization": "piechart",
                  "chartSettings": {
                    "seriesLabelSettings": [
                      {
                        "seriesName": "installed",
                        "color": "green"
                      },
                      {
                        "seriesName": "notInstalled",
                        "color": "redBright"
                      },
                      {
                        "seriesName": "",
                        "label": "notApplicable",
                        "color": "gray"
                      }
                    ]
                  }
                },
                "customWidth": "33",
                "name": "query - 5",
                "styleSettings": {
                  "showBorder": true
                }
              },
              {
                "type": 3,
                "content": {
                  "version": "KqlItem/1.0",
                  "query": "\nHeartbeat\n| where ResourceProvider in ('Microsoft.Compute', 'Microsoft.Hybridcompute') and not(ResourceType =~ 'virtualMachineScaleSets') and tostring('{subscriptions:subscriptionid}') contains SubscriptionId\n| summarize arg_max(TimeGenerated, SubscriptionId) by tolower(ResourceId)\n| extend LastSeen = case(TimeGenerated > now(-15m), \"currently reporting\",\n                        TimeGenerated < now(-15m) and TimeGenerated > now(-24h), \"not reporting for > 15 min\",\n                        TimeGenerated < now(-24h) and TimeGenerated > now(-48h), \"not reporting for > 24 hours\",\n                        TimeGenerated < now(-48h) and TimeGenerated > now(-3d), \"not reporting for > 48 hours\",\n                        TimeGenerated < now(-3d) and TimeGenerated > now(-7d), \"not reporting for > 3 days\",\n                        TimeGenerated < now(-7d) and TimeGenerated > now(-30d), \"not reporting for > 7 days\",\n                        \"failed\")\n| order by TimeGenerated\n| summarize NotReportingSince = count() by LastSeen",
                  "size": 3,
                  "title": "Machine reporting status",
                  "timeContext": {
                    "durationMs": 2592000000
                  },
                  "exportFieldName": "",
                  "exportParameterName": "lastSeen",
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces",
                  "crossComponentResources": [
                    "{workspace}"
                  ],
                  "visualization": "piechart",
                  "chartSettings": {
                    "seriesLabelSettings": [
                      {
                        "seriesName": "not reporting for > 7 days",
                        "color": "redDark"
                      },
                      {
                        "seriesName": "currently reporting",
                        "color": "green"
                      },
                      {
                        "seriesName": "not reporting for > 15 min",
                        "color": "yellow"
                      },
                      {
                        "seriesName": "not reporting for > 24 hours",
                        "color": "orange"
                      },
                      {
                        "seriesName": "not reporting for > 48 hours",
                        "color": "redBright"
                      },
                      {
                        "seriesName": "not reporting for > 3 days",
                        "color": "red"
                      }
                    ],
                    "ySettings": {
                      "numberFormatSettings": {
                        "unit": 0,
                        "options": {
                          "style": "decimal",
                          "useGrouping": true
                        }
                      }
                    }
                  }
                },
                "customWidth": "33",
                "name": "query - 3",
                "styleSettings": {
                  "showBorder": true
                }
              },
              {
                "type": 3,
                "content": {
                  "version": "KqlItem/1.0",
                  "query": "securityresources\n| where type =~ \"microsoft.security/assessments\" or type =~ \"microsoft.security/softwareInventories\"\n| extend assessmentStatusCode = case(type =~ \"microsoft.security/assessments\", tostring(properties.status.code), \"\")\n| extend severity = case(assessmentStatusCode =~ \"unhealthy\", tolower(tostring(properties.metadata.severity)), tolower(assessmentStatusCode))\n| extend exemptionType = case(tolower(type) != \"microsoft.security/assessments\",\"N/A\", case(properties.status.cause =~ \"exempt\", \"Yes\", \"No\"))\n| extend source = case(type =~ \"microsoft.security/assessments\", tostring(properties.resourceDetails.Source), \"\")\n| extend stringUntilWorkspaces = extract(\"^(.+)/(.+)/onPremiseMachines/(.+)/providers/Microsoft.Security/assessments/.+$\",1,id)\n| extend resourceId = trim(\" \", tolower(tostring(case(source =~ \"azure\", properties.resourceDetails.Id,\n                                                                            source =~ \"aws\" and isnotempty(tostring(properties.resourceDetails.ConnectorId)), properties.resourceDetails.Id,\n                                                                            source =~ \"aws\", properties.resourceDetails.AzureResourceId,\n                                                                            source =~ \"gcp\", properties.resourceDetails.AzureResourceId,\n                                                                            source =~ \"onpremise\", strcat(stringUntilWorkspaces,\"/workspaceNamePlaceholder/onPremiseMachines/\",properties.resourceDetails.MachineName,\"_\",properties.resourceDetails.VMUUID),\n                                                                            type =~ \"microsoft.security/assessments\", extract(\"^(.+)/providers/Microsoft.Security/assessments/.+$\",1,id),extract(\"^(.+)/providers/Microsoft.Security/softwareInventories/.+$\",1,id)))))\n| extend resourceName = iff(source =~ \"aws\" and isnotempty(tostring(properties.resourceDetails.ConnectorId)), tostring(properties.additionalData.ResourceName), extract(@\"(.+)/(.+)\", 2, resourceId))\n| extend regexResourceId = extract_all(@\"/providers/([^/]+)(?:/([^/]+)/[^/]+(?:/([^/]+)/[^/]+)?)?/([^/]+)/[^/]+$\", resourceId)\n| extend RegexResourceType = regexResourceId[0]\n| extend mainType = RegexResourceType[1], extendedType = RegexResourceType[2], resourceType = RegexResourceType[3]\n| extend providerName = RegexResourceType[0],\n                        mainType = case(mainType !~ \"\", strcat(\"/\",mainType), \"\"),\n                        extendedType = case(extendedType!~ \"\", strcat(\"/\",extendedType), \"\"),\n                        resourceType = case(resourceType!~ \"\", strcat(\"/\",resourceType), \"\")\n| extend array = split(resourceId, '/')\n| extend typeFullPath = case(\n                    array_length(array) == 3, 'subscription',\n                    array_length(array) == 5, 'resourcegroups',\n                    source =~ \"aws\" and isnotempty(tostring(properties.resourceDetails.ConnectorId)), tolower(strcat(providerName, mainType, \"/\", tostring(properties.additionalData.ResourceProvider), tostring(properties.additionalData.ResourceType))),\n                    strcat(providerName, mainType, extendedType, resourceType))\n| extend resourceType = case(typeFullPath =~ 'resourcegroups' or typeFullPath =~ 'subscription', typeFullPath, tolower(trim(\"/\", resourceType)))\n| extend assessmentKey = case(type =~ \"microsoft.security/assessments\", tostring(name), \"\")\n| extend softwareVendorName = case(type =~ \"microsoft.security/softwareInventories\", tostring(properties.vendor), \"\")\n| extend softwareName = case(type =~ \"microsoft.security/softwareInventories\", tostring(properties.softwareName), \"\")\n| extend softwareVersion = case(type =~ \"microsoft.security/softwareInventories\", tostring(properties.version), \"\")\n| extend softwareNameIdentifier = case(type =~ \"microsoft.security/softwareInventories\", strcat(softwareVendorName, \",\", softwareName, \",\", softwareVersion), \"\")\n| extend environment = case(type =~ \"microsoft.security/assessments\", properties.resourceDetails[\"Source\"], \"\")\n| extend environment = case(environment =~ \"onpremise\", tolower(\"Non-Azure\"), tolower(environment))\n| extend osTypeProperty = properties.additionalData[\"OS Type\"]\n| extend osType = case(isnotempty(osTypeProperty), osTypeProperty, \"\")\n| extend hasAgent = case(assessmentKey == \"d1db3318-01ff-16de-29eb-28b344515626\" or assessmentKey == \"45cfe080-ceb1-a91e-9743-71551ed24e94\" or assessmentKey == \"720a3e77-0b9a-4fa9-98b6-ddf0fd7e32c1\" or assessmentKey == \"27ac71b1-75c5-41c2-adc2-858f5db45b08\", assessmentStatusCode, \"\")\n| extend hasAgent = case(((assessmentKey == \"4ab6e3c5-74dd-8b35-9ab9-f61b30875b27\" or assessmentKey == \"181ac480-f7c4-544b-9865-11b8ffe87f47\" or assessmentKey == \"4fb67663-9ab9-475d-b026-8c544cced439\") and (typeFullPath in ('microsoft.hybridcompute/machines', 'microsoft.kubernetes/connectedclusters'))) , \"healthy\", hasAgent)\n| extend workspaceAzureResourceId = case(hasAgent !~ \"\", properties.additionalData[\"Reporting workspace azure id\"], \"\")\n| extend workspaceName = case(workspaceAzureResourceId !~ \"\", extract(@\"(.+)/(.+)\", 2, workspaceAzureResourceId), \"\")\n| extend assessmentDisplayName = case(type =~ \"microsoft.security/assessments\", case(isnotempty(properties.displayName), properties.displayName, properties.metadata.displayName), \"\")\n| extend assessmentIdentifier = case(type =~ \"microsoft.security/assessments\", strcat(assessmentKey, \",\" , assessmentDisplayName, \",\", severity), \"\")\n| summarize assessmentsCount = count() , assessmentsIdentifier = make_list(assessmentIdentifier), softwareNamesIdentifier = make_list(softwareNameIdentifier), hasAgent = max(hasAgent), workspaceName = max(workspaceName), environment = max(environment), osType = max(osType), exemptionType = max(exemptionType)  by resourceId, subscriptionId, resourceName, resourceType, typeFullPath, severity\n| extend packAssessments = pack(severity, assessmentsCount)\n| summarize assessmentsSummary = make_bag(packAssessments), assessmentsIdentifier = make_set(assessmentsIdentifier), softwareNamesIdentifier = make_set(softwareNamesIdentifier), hasAgent = max(hasAgent), workspaceName= max(workspaceName), environment = max(environment), osType= max(osType), exemptionType = max(exemptionType)  by resourceId, subscriptionId, resourceName, resourceType, typeFullPath\n| extend agentMonitoring = case(hasAgent =~ \"NotApplicable\" or hasAgent =~ \"\", '',\n                                                hasAgent =~ \"Unhealthy\", \"notInstalled\",\n                                                \"installed\")\n| join kind=leftouter (\n                    securityresources\n| where type =~ \"microsoft.security/pricings\"\n| project subscriptionId, bundleName = tolower(name), freeTrialRemainingTime = properties.freeTrialRemainingTime, pricingTier = tolower(properties.pricingTier)\n| extend bundlesPricing = pack(bundleName, pricingTier)\n| summarize subscriptionPricing = make_bag(bundlesPricing) by subscriptionId\n                ) on subscriptionId\n| extend hasNoSoftwareData = case(array_length(softwareNamesIdentifier) == 1, case(set_has_element(softwareNamesIdentifier, \"\"), true, false), false)\n| extend softwareNamesIdentifier = case(hasNoSoftwareData, softwareNamesIdentifier, set_difference(softwareNamesIdentifier, pack_array(\"\")))\n| extend AssessmentsHigh = case(isnull(assessmentsSummary.high), 0 , toint(assessmentsSummary.high))\n| extend AssessmentsMedium = case(isnull(assessmentsSummary.medium), 0 , toint(assessmentsSummary.medium))\n| extend AssessmentsLow = case(isnull(assessmentsSummary.low), 0 , toint(assessmentsSummary.low))\n| extend unhealthyAssessmentsCount = AssessmentsHigh + AssessmentsMedium + AssessmentsLow\n| extend virtualmachines = case(isnull(subscriptionPricing), '' , subscriptionPricing.virtualmachines)\n| extend virtualmachines = case(virtualmachines == 'free', 'off', 'on')\n| extend sqlservers = case(isnull(subscriptionPricing), '' , subscriptionPricing.sqlservers)\n| extend sqlservers = case(sqlservers == 'free', 'off', 'on')\n| extend kubernetesservice = case(isnull(subscriptionPricing), '' , subscriptionPricing.kubernetesservice)\n| extend kubernetesservice = case(kubernetesservice == 'free', 'off', 'on')\n| extend containerregistry = case(isnull(subscriptionPricing), '' , subscriptionPricing.containerregistry)\n| extend containerregistry = case(containerregistry == 'free', 'off', 'on')\n| extend connectedcontainerregistry = case(isnull(subscriptionPricing), '' , subscriptionPricing.connectedcontainerregistry)\n| extend connectedcontainerregistry = case(connectedcontainerregistry == 'free', 'off', 'on')\n| extend sqlservervirtualmachines = case(isnull(subscriptionPricing), '' , subscriptionPricing.sqlservervirtualmachines)\n| extend sqlservervirtualmachines = case(sqlservervirtualmachines == 'free', 'off', 'on')\n| extend appservices = case(isnull(subscriptionPricing), '' , subscriptionPricing.appservices)\n| extend appservices = case(appservices == 'free', 'off', 'on')\n| extend storageaccounts = case(isnull(subscriptionPricing), '' , subscriptionPricing.storageaccounts)\n| extend storageaccounts = case(storageaccounts == 'free', 'off', 'on')\n| extend keyvaults = case(isnull(subscriptionPricing), '' , subscriptionPricing.keyvaults)\n| extend keyvaults = case(keyvaults == 'free', 'off', 'on')\n| extend opensourcerelationaldatabases = case(isnull(subscriptionPricing), '' , subscriptionPricing.opensourcerelationaldatabases)\n| extend opensourcerelationaldatabases = case(opensourcerelationaldatabases == 'free', 'off', 'on')\n| extend calculatedSubscriptionPricing = case(resourceType =~ \"subscription\" and isempty(subscriptionPricing) == false , iff(subscriptionPricing has \"free\" and subscriptionPricing has \"standard\", \"partial\", iff(subscriptionPricing has \"free\", \"off\", \"on\")), \"\")\n| extend resourcePricing = case(typeFullPath =~ \"microsoft.classiccompute/virtualmachines\", virtualmachines, typeFullPath =~ \"microsoft.compute/virtualmachines\", virtualmachines, typeFullPath =~ \"microsoft.hybridcompute/machines\", virtualmachines, typeFullPath =~ \"microsoft.sql/servers\", sqlservers, typeFullPath =~ \"microsoft.containerservice/managedclusters\", kubernetesservice, typeFullPath =~ \"microsoft.kubernetes/connectedclusters\", kubernetesservice, typeFullPath =~ \"microsoft.containerregistry/registries\", containerregistry, typeFullPath =~ \"microsoft.security/connectedcontainerregistries\", connectedcontainerregistry, typeFullPath =~ \"microsoft.sqlvirtualmachine/sqlvirtualmachines\", sqlservervirtualmachines, typeFullPath =~ \"microsoft.web/sites\", appservices, typeFullPath =~ \"microsoft.storage/storageaccounts\", storageaccounts, typeFullPath =~ \"microsoft.compute/virtualmachinescalesets\", virtualmachines, typeFullPath =~ \"microsoft.keyvault/vaults\", keyvaults, typeFullPath =~ \"microsoft.dbforpostgresql/servers\", opensourcerelationaldatabases, typeFullPath =~ \"microsoft.dbformysql/servers\", opensourcerelationaldatabases, typeFullPath =~ \"microsoft.dbformariadb/servers\", opensourcerelationaldatabases, calculatedSubscriptionPricing)\n| extend pricing = case(resourceType =~ \"subscription\" , calculatedSubscriptionPricing , resourcePricing)\n| extend selectedSoftware = \"\"\n| project resourceType, exemptionType, typeFullPath, resourceId, resourceName, subscriptionId, environment, osType, workspaceName, agentMonitoring, assessmentsIdentifier, assessmentsSummary, subscriptionPricing, unhealthyAssessmentsCount, pricing, softwareNamesIdentifier, selectedSoftware\n| extend resourceGroup = tolower(tostring(split(resourceId, \"/\")[4]))\n| order by unhealthyAssessmentsCount, subscriptionId, resourceType, resourceId\n| where typeFullPath in ('microsoft.compute/virtualmachines', 'microsoft.hybridcompute/machines')\n| where isnotempty(resourceId)\n| summarize dcount(resourceId) by AzureDefender = pricing",
                  "size": 3,
                  "title": "Defender for Cloud coverage",
                  "exportParameterName": "defenderStatus",
                  "queryType": 1,
                  "resourceType": "microsoft.resourcegraph/resources",
                  "crossComponentResources": [
                    "{subscriptions}"
                  ],
                  "visualization": "piechart",
                  "chartSettings": {
                    "seriesLabelSettings": [
                      {
                        "seriesName": "on",
                        "color": "green"
                      },
                      {
                        "seriesName": "of",
                        "color": "redBright"
                      }
                    ]
                  }
                },
                "customWidth": "33",
                "name": "query - 3",
                "styleSettings": {
                  "showBorder": true
                }
              }
            ],
            "exportParameters": true
          },
          "conditionalVisibilities": [
            {
              "parameterName": "workspace",
              "comparison": "isNotEqualTo"
            },
            {
              "parameterName": "SelectedTab",
              "comparison": "isEqualTo",
              "value": "OverviewTab"
            }
          ],
          "name": "summary - group",
          "styleSettings": {
            "showBorder": true
          }
        },
        {
          "type": 12,
          "content": {
            "version": "NotebookGroup/1.0",
            "groupType": "editable",
            "title": "Log Analytics Agent status details",
            "items": [
              {
                "type": 1,
                "content": {
                  "json": "# Log Analytics Agent installation status details\nThis table shows the Log Analytics installation status for all machines that are protected by Microsoft Defender for Cloud, based on the selection in the *Log Analytics Agent installation status* pie chart above.",
                  "style": "info"
                },
                "name": "text - 1"
              },
              {
                "type": 3,
                "content": {
                  "version": "KqlItem/1.0",
                  "query": "securityresources\n| where type =~ \"microsoft.security/assessments\" or type =~ \"microsoft.security/softwareInventories\"\n| extend assessmentStatusCode = case(type =~ \"microsoft.security/assessments\", tostring(properties.status.code), \"\")\n| extend severity = case(assessmentStatusCode =~ \"unhealthy\", tolower(tostring(properties.metadata.severity)), tolower(assessmentStatusCode))\n| extend exemptionType = case(tolower(type) != \"microsoft.security/assessments\",\"N/A\", case(properties.status.cause =~ \"exempt\", \"Yes\", \"No\"))\n| extend source = case(type =~ \"microsoft.security/assessments\", tostring(properties.resourceDetails.Source), \"\")\n| extend stringUntilWorkspaces = extract(\"^(.+)/(.+)/onPremiseMachines/(.+)/providers/Microsoft.Security/assessments/.+$\",1,id)\n| extend resourceId = trim(\" \", tolower(tostring(case(source =~ \"azure\", properties.resourceDetails.Id,\n                                                                            source =~ \"aws\" and isnotempty(tostring(properties.resourceDetails.ConnectorId)), properties.resourceDetails.Id,\n                                                                            source =~ \"aws\", properties.resourceDetails.AzureResourceId,\n                                                                            source =~ \"gcp\", properties.resourceDetails.AzureResourceId,\n                                                                            source =~ \"onpremise\", strcat(stringUntilWorkspaces,\"/workspaceNamePlaceholder/onPremiseMachines/\",properties.resourceDetails.MachineName,\"_\",properties.resourceDetails.VMUUID),\n                                                                            type =~ \"microsoft.security/assessments\", extract(\"^(.+)/providers/Microsoft.Security/assessments/.+$\",1,id),extract(\"^(.+)/providers/Microsoft.Security/softwareInventories/.+$\",1,id)))))\n| extend resourceName = iff(source =~ \"aws\" and isnotempty(tostring(properties.resourceDetails.ConnectorId)), tostring(properties.additionalData.ResourceName), extract(@\"(.+)/(.+)\", 2, resourceId))\n| extend regexResourceId = extract_all(@\"/providers/([^/]+)(?:/([^/]+)/[^/]+(?:/([^/]+)/[^/]+)?)?/([^/]+)/[^/]+$\", resourceId)\n| extend RegexResourceType = regexResourceId[0]\n| extend mainType = RegexResourceType[1], extendedType = RegexResourceType[2], resourceType = RegexResourceType[3]\n| extend providerName = RegexResourceType[0],\n                        mainType = case(mainType !~ \"\", strcat(\"/\",mainType), \"\"),\n                        extendedType = case(extendedType!~ \"\", strcat(\"/\",extendedType), \"\"),\n                        resourceType = case(resourceType!~ \"\", strcat(\"/\",resourceType), \"\")\n| extend array = split(resourceId, '/')\n| extend typeFullPath = case(\n                    array_length(array) == 3, 'subscription',\n                    array_length(array) == 5, 'resourcegroups',\n                    source =~ \"aws\" and isnotempty(tostring(properties.resourceDetails.ConnectorId)), tolower(strcat(providerName, mainType, \"/\", tostring(properties.additionalData.ResourceProvider), tostring(properties.additionalData.ResourceType))),\n                    strcat(providerName, mainType, extendedType, resourceType))\n| extend resourceType = case(typeFullPath =~ 'resourcegroups' or typeFullPath =~ 'subscription', typeFullPath, tolower(trim(\"/\", resourceType)))\n| extend assessmentKey = case(type =~ \"microsoft.security/assessments\", tostring(name), \"\")\n| extend softwareVendorName = case(type =~ \"microsoft.security/softwareInventories\", tostring(properties.vendor), \"\")\n| extend softwareName = case(type =~ \"microsoft.security/softwareInventories\", tostring(properties.softwareName), \"\")\n| extend softwareVersion = case(type =~ \"microsoft.security/softwareInventories\", tostring(properties.version), \"\")\n| extend softwareNameIdentifier = case(type =~ \"microsoft.security/softwareInventories\", strcat(softwareVendorName, \",\", softwareName, \",\", softwareVersion), \"\")\n| extend environment = case(type =~ \"microsoft.security/assessments\", properties.resourceDetails[\"Source\"], \"\")\n| extend environment = case(environment =~ \"onpremise\", tolower(\"Non-Azure\"), tolower(environment))\n| extend osTypeProperty = properties.additionalData[\"OS Type\"]\n| extend osType = case(isnotempty(osTypeProperty), osTypeProperty, \"\")\n| extend hasAgent = case(assessmentKey == \"d1db3318-01ff-16de-29eb-28b344515626\" or assessmentKey == \"45cfe080-ceb1-a91e-9743-71551ed24e94\" or assessmentKey == \"720a3e77-0b9a-4fa9-98b6-ddf0fd7e32c1\" or assessmentKey == \"27ac71b1-75c5-41c2-adc2-858f5db45b08\", assessmentStatusCode, \"\")\n| extend hasAgent = case(((assessmentKey == \"4ab6e3c5-74dd-8b35-9ab9-f61b30875b27\" or assessmentKey == \"181ac480-f7c4-544b-9865-11b8ffe87f47\" or assessmentKey == \"4fb67663-9ab9-475d-b026-8c544cced439\") and (typeFullPath in ('microsoft.hybridcompute/machines', 'microsoft.kubernetes/connectedclusters'))) , \"healthy\", hasAgent)\n| extend workspaceAzureResourceId = case(hasAgent !~ \"\", properties.additionalData[\"Reporting workspace azure id\"], \"\")\n| extend workspaceName = case(workspaceAzureResourceId !~ \"\", extract(@\"(.+)/(.+)\", 2, workspaceAzureResourceId), \"\")\n| extend assessmentDisplayName = case(type =~ \"microsoft.security/assessments\", case(isnotempty(properties.displayName), properties.displayName, properties.metadata.displayName), \"\")\n| extend assessmentIdentifier = case(type =~ \"microsoft.security/assessments\", strcat(assessmentKey, \",\" , assessmentDisplayName, \",\", severity), \"\")\n| summarize assessmentsCount = count() , assessmentsIdentifier = make_list(assessmentIdentifier), softwareNamesIdentifier = make_list(softwareNameIdentifier), hasAgent = max(hasAgent), workspaceName = max(workspaceName), environment = max(environment), osType = max(osType), exemptionType = max(exemptionType)  by resourceId, subscriptionId, resourceName, resourceType, typeFullPath, severity\n| extend packAssessments = pack(severity, assessmentsCount)\n| summarize assessmentsSummary = make_bag(packAssessments), assessmentsIdentifier = make_set(assessmentsIdentifier), softwareNamesIdentifier = make_set(softwareNamesIdentifier), hasAgent = max(hasAgent), workspaceName= max(workspaceName), environment = max(environment), osType= max(osType), exemptionType = max(exemptionType)  by resourceId, subscriptionId, resourceName, resourceType, typeFullPath\n| extend agentMonitoring = case(hasAgent =~ \"NotApplicable\" or hasAgent =~ \"\", '',\n                                                hasAgent =~ \"Unhealthy\", \"notInstalled\",\n                                                \"installed\")\n| join kind=leftouter (\n                    securityresources\n| where type =~ \"microsoft.security/pricings\"\n| project subscriptionId, bundleName = tolower(name), freeTrialRemainingTime = properties.freeTrialRemainingTime, pricingTier = tolower(properties.pricingTier)\n| extend bundlesPricing = pack(bundleName, pricingTier)\n| summarize subscriptionPricing = make_bag(bundlesPricing) by subscriptionId\n                ) on subscriptionId\n| extend hasNoSoftwareData = case(array_length(softwareNamesIdentifier) == 1, case(set_has_element(softwareNamesIdentifier, \"\"), true, false), false)\n| extend softwareNamesIdentifier = case(hasNoSoftwareData, softwareNamesIdentifier, set_difference(softwareNamesIdentifier, pack_array(\"\")))\n| extend AssessmentsHigh = case(isnull(assessmentsSummary.high), 0 , toint(assessmentsSummary.high))\n| extend AssessmentsMedium = case(isnull(assessmentsSummary.medium), 0 , toint(assessmentsSummary.medium))\n| extend AssessmentsLow = case(isnull(assessmentsSummary.low), 0 , toint(assessmentsSummary.low))\n| extend unhealthyAssessmentsCount = AssessmentsHigh + AssessmentsMedium + AssessmentsLow\n| extend virtualmachines = case(isnull(subscriptionPricing), '' , subscriptionPricing.virtualmachines)\n| extend virtualmachines = case(virtualmachines == 'free', 'off', 'on')\n| extend sqlservers = case(isnull(subscriptionPricing), '' , subscriptionPricing.sqlservers)\n| extend sqlservers = case(sqlservers == 'free', 'off', 'on')\n| extend kubernetesservice = case(isnull(subscriptionPricing), '' , subscriptionPricing.kubernetesservice)\n| extend kubernetesservice = case(kubernetesservice == 'free', 'off', 'on')\n| extend containerregistry = case(isnull(subscriptionPricing), '' , subscriptionPricing.containerregistry)\n| extend containerregistry = case(containerregistry == 'free', 'off', 'on')\n| extend connectedcontainerregistry = case(isnull(subscriptionPricing), '' , subscriptionPricing.connectedcontainerregistry)\n| extend connectedcontainerregistry = case(connectedcontainerregistry == 'free', 'off', 'on')\n| extend sqlservervirtualmachines = case(isnull(subscriptionPricing), '' , subscriptionPricing.sqlservervirtualmachines)\n| extend sqlservervirtualmachines = case(sqlservervirtualmachines == 'free', 'off', 'on')\n| extend appservices = case(isnull(subscriptionPricing), '' , subscriptionPricing.appservices)\n| extend appservices = case(appservices == 'free', 'off', 'on')\n| extend storageaccounts = case(isnull(subscriptionPricing), '' , subscriptionPricing.storageaccounts)\n| extend storageaccounts = case(storageaccounts == 'free', 'off', 'on')\n| extend keyvaults = case(isnull(subscriptionPricing), '' , subscriptionPricing.keyvaults)\n| extend keyvaults = case(keyvaults == 'free', 'off', 'on')\n| extend opensourcerelationaldatabases = case(isnull(subscriptionPricing), '' , subscriptionPricing.opensourcerelationaldatabases)\n| extend opensourcerelationaldatabases = case(opensourcerelationaldatabases == 'free', 'off', 'on')\n| extend calculatedSubscriptionPricing = case(resourceType =~ \"subscription\" and isempty(subscriptionPricing) == false , iff(subscriptionPricing has \"free\" and subscriptionPricing has \"standard\", \"partial\", iff(subscriptionPricing has \"free\", \"off\", \"on\")), \"\")\n| extend resourcePricing = case(typeFullPath =~ \"microsoft.classiccompute/virtualmachines\", virtualmachines, typeFullPath =~ \"microsoft.compute/virtualmachines\", virtualmachines, typeFullPath =~ \"microsoft.hybridcompute/machines\", virtualmachines, typeFullPath =~ \"microsoft.sql/servers\", sqlservers, typeFullPath =~ \"microsoft.containerservice/managedclusters\", kubernetesservice, typeFullPath =~ \"microsoft.kubernetes/connectedclusters\", kubernetesservice, typeFullPath =~ \"microsoft.containerregistry/registries\", containerregistry, typeFullPath =~ \"microsoft.security/connectedcontainerregistries\", connectedcontainerregistry, typeFullPath =~ \"microsoft.sqlvirtualmachine/sqlvirtualmachines\", sqlservervirtualmachines, typeFullPath =~ \"microsoft.web/sites\", appservices, typeFullPath =~ \"microsoft.storage/storageaccounts\", storageaccounts, typeFullPath =~ \"microsoft.compute/virtualmachinescalesets\", virtualmachines, typeFullPath =~ \"microsoft.keyvault/vaults\", keyvaults, typeFullPath =~ \"microsoft.dbforpostgresql/servers\", opensourcerelationaldatabases, typeFullPath =~ \"microsoft.dbformysql/servers\", opensourcerelationaldatabases, typeFullPath =~ \"microsoft.dbformariadb/servers\", opensourcerelationaldatabases, calculatedSubscriptionPricing)\n| extend pricing = case(resourceType =~ \"subscription\" , calculatedSubscriptionPricing , resourcePricing)\n| extend selectedSoftware = \"\"\n| project resourceType, exemptionType, typeFullPath, resourceId, resourceName, subscriptionId, environment, osType, workspaceName, agentMonitoring, assessmentsIdentifier, assessmentsSummary, subscriptionPricing, unhealthyAssessmentsCount, pricing, softwareNamesIdentifier, selectedSoftware\n| extend resourceGroup = tolower(tostring(split(resourceId, \"/\")[4]))\n| order by unhealthyAssessmentsCount, subscriptionId, resourceType, resourceId\n| where typeFullPath in ('microsoft.compute/virtualmachines', 'microsoft.hybridcompute/machines')\n| where isnotempty(resourceId) and agentMonitoring == parse_json('{agentInstallStatus}').series\n| join kind = leftouter (\n    resources\n    | where type =~ \"microsoft.compute/virtualMachines\"\n    | extend powerState = properties.extended.instanceView.powerState.displayStatus\n    | project resourceId = tolower(id), tostring(powerState)\n) on resourceId",
                  "size": 3,
                  "queryType": 1,
                  "resourceType": "microsoft.resourcegraph/resources",
                  "crossComponentResources": [
                    "{subscriptions}"
                  ],
                  "gridSettings": {
                    "formatters": [
                      {
                        "columnMatch": "resourceType",
                        "formatter": 5
                      },
                      {
                        "columnMatch": "exemptionType",
                        "formatter": 5
                      },
                      {
                        "columnMatch": "typeFullPath",
                        "formatter": 5
                      },
                      {
                        "columnMatch": "resourceName",
                        "formatter": 5
                      },
                      {
                        "columnMatch": "agentMonitoring",
                        "formatter": 18,
                        "formatOptions": {
                          "thresholdsOptions": "icons",
                          "thresholdsGrid": [
                            {
                              "operator": "==",
                              "thresholdValue": "installed",
                              "representation": "success",
                              "text": "{0}{1}"
                            },
                            {
                              "operator": "==",
                              "thresholdValue": "notInstalled",
                              "representation": "disabled",
                              "text": "{0}{1}"
                            },
                            {
                              "operator": "==",
                              "thresholdValue": "Unhealthy",
                              "representation": "2",
                              "text": "{0}{1}"
                            },
                            {
                              "operator": "==",
                              "thresholdValue": "notApplicable",
                              "representation": "cancelled",
                              "text": "{0}{1}"
                            },
                            {
                              "operator": "Default",
                              "thresholdValue": null,
                              "representation": "cancelled",
                              "text": "notApplicable"
                            }
                          ]
                        }
                      },
                      {
                        "columnMatch": "assessmentsIdentifier",
                        "formatter": 5
                      },
                      {
                        "columnMatch": "assessmentsSummary",
                        "formatter": 5
                      },
                      {
                        "columnMatch": "subscriptionPricing",
                        "formatter": 5
                      },
                      {
                        "columnMatch": "unhealthyAssessmentsCount",
                        "formatter": 3,
                        "formatOptions": {
                          "min": 0,
                          "max": 15,
                          "palette": "greenRed"
                        }
                      },
                      {
                        "columnMatch": "pricing",
                        "formatter": 18,
                        "formatOptions": {
                          "thresholdsOptions": "icons",
                          "thresholdsGrid": [
                            {
                              "operator": "==",
                              "thresholdValue": "on",
                              "representation": "success",
                              "text": "{0}{1}"
                            },
                            {
                              "operator": "==",
                              "thresholdValue": "off",
                              "representation": "disabled",
                              "text": "{0}{1}"
                            },
                            {
                              "operator": "Default",
                              "thresholdValue": null,
                              "representation": "disabled",
                              "text": "{0}{1}"
                            }
                          ]
                        }
                      },
                      {
                        "columnMatch": "softwareNamesIdentifier",
                        "formatter": 5
                      },
                      {
                        "columnMatch": "selectedSoftware",
                        "formatter": 5
                      },
                      {
                        "columnMatch": "resourceGroup",
                        "formatter": 5
                      },
                      {
                        "columnMatch": "resourceId1",
                        "formatter": 5
                      },
                      {
                        "columnMatch": "powerState",
                        "formatter": 18,
                        "formatOptions": {
                          "thresholdsOptions": "icons",
                          "thresholdsGrid": [
                            {
                              "operator": "contains",
                              "thresholdValue": "deallocated",
                              "representation": "stopped",
                              "text": "{0}{1}"
                            },
                            {
                              "operator": "contains",
                              "thresholdValue": "running",
                              "representation": "success",
                              "text": "{0}{1}"
                            },
                            {
                              "operator": "contains",
                              "thresholdValue": "stopping",
                              "representation": "pending",
                              "text": "{0}{1}"
                            },
                            {
                              "operator": "contains",
                              "thresholdValue": "starting",
                              "representation": "pending",
                              "text": "{0}{1}"
                            },
                            {
                              "operator": "Default",
                              "thresholdValue": null,
                              "representation": "unknown",
                              "text": "{0}{1}"
                            }
                          ]
                        }
                      }
                    ],
                    "labelSettings": [
                      {
                        "columnId": "resourceId",
                        "label": "Resource ID"
                      },
                      {
                        "columnId": "resourceName",
                        "label": "Resource Name"
                      },
                      {
                        "columnId": "subscriptionId",
                        "label": "Subscription ID"
                      },
                      {
                        "columnId": "environment",
                        "label": "Environment"
                      },
                      {
                        "columnId": "osType",
                        "label": "OS Type"
                      },
                      {
                        "columnId": "workspaceName",
                        "label": "Workspace Name"
                      },
                      {
                        "columnId": "agentMonitoring",
                        "label": "Agent Status"
                      },
                      {
                        "columnId": "unhealthyAssessmentsCount",
                        "label": "Open Recommendations"
                      },
                      {
                        "columnId": "pricing",
                        "label": "Defender for Cloud Coverage"
                      },
                      {
                        "columnId": "resourceGroup",
                        "label": "Resource Group"
                      },
                      {
                        "columnId": "powerState",
                        "label": "Power State"
                      }
                    ]
                  }
                },
                "conditionalVisibility": {
                  "parameterName": "agentInstallStatus",
                  "comparison": "isNotEqualTo"
                },
                "name": "query - 0"
              }
            ]
          },
          "conditionalVisibility": {
            "parameterName": "agentInstallStatus",
            "comparison": "isNotEqualTo"
          },
          "name": "Log Analytics Agent installation status details",
          "styleSettings": {
            "showBorder": true
          }
        },
        {
          "type": 12,
          "content": {
            "version": "NotebookGroup/1.0",
            "groupType": "editable",
            "title": "Machine reporting status details",
            "loadType": "always",
            "items": [
              {
                "type": 3,
                "content": {
                  "version": "KqlItem/1.0",
                  "query": "let lastStamp = parse_json('{lastSeen}').series;\nlet period1 = case(lastStamp =~ \"currently reporting\", -15m,\n    lastStamp == \"not reporting for > 15 min\", -24h,\n    lastStamp == \"not reporting for > 24 hours\", -48h,\n    lastStamp == \"not reporting for > 48 hours\", -3d,\n    lastStamp == \"not reporting for > 3 days\", -7d,\n    lastStamp == \"not reporting for > 7 days\", -30d,\n -31d);\n let period2 = case( lastStamp == \"currently reporting\", -0m,\n    lastStamp == \"not reporting for > 15 min\", -15m,\n    lastStamp == \"not reporting for > 24 hours\", -24h,\n    lastStamp == \"not reporting for > 48 hours\", -48h,\n    lastStamp == \"not reporting for > 3 days\", -3d,\n    lastStamp == \"not reporting for > 7 days\", -7d,\n -31d);\nHeartbeat\n| where TimeGenerated > now(period1) and ResourceProvider in ('Microsoft.Compute', 'Microsoft.Hybridcompute') and not(ResourceType =~ 'virtualMachineScaleSets') and tostring('{subscriptions:subscriptionid}') contains SubscriptionId\n| summarize arg_max(TimeGenerated,*) by ResourceId\n| join kind = inner  (Usage\n    | project ResourceUri, TenantId\n) on TenantId\n| extend ResourceId = tolower(ResourceId), DefenderForServersStatus = case (\n    Solutions has \"security\", \"enabled\", \"disabled\"\n), DefenderForSqlStatus = case (\n    Solutions has \"sqlAdvancedThreatProtection\", \"enabled\", \"disabled\"\n)\n| join kind = leftanti (\n    Heartbeat\n    | where TimeGenerated > now(period2)\n    | extend ResourceId = tolower(ResourceId)\n) on ResourceId\n| summarize arg_max(LatestTimestamp=TimeGenerated, SubscriptionId, ResourceUri, DefenderForServersStatus, DefenderForSqlStatus) by ResourceId\n| order by LatestTimestamp",
                  "size": 4,
                  "timeContext": {
                    "durationMs": 2592000000
                  },
                  "queryType": 0,
                  "resourceType": "microsoft.operationalinsights/workspaces",
                  "crossComponentResources": [
                    "{workspace}"
                  ],
                  "gridSettings": {
                    "sortBy": [
                      {
                        "itemKey": "$gen_link_ResourceUri_3",
                        "sortOrder": 1
                      }
                    ]
                  },
                  "sortBy": [
                    {
                      "itemKey": "$gen_link_ResourceUri_3",
                      "sortOrder": 1
                    }
                  ]
                },
                "customWidth": "1",
                "conditionalVisibilities": [
                  {
                    "parameterName": "lastSeen",
                    "comparison": "isNotEqualTo"
                  },
                  {
                    "parameterName": "workspace",
                    "comparison": "isEqualTo"
                  }
                ],
                "name": "heartbeat_table",
                "styleSettings": {
                  "maxWidth": "50"
                }
              },
              {
                "type": 3,
                "content": {
                  "version": "KqlItem/1.0",
                  "query": "securityresources\n| where type =~ \"microsoft.security/assessments\" or type =~ \"microsoft.security/softwareInventories\"\n| extend assessmentStatusCode = case(type =~ \"microsoft.security/assessments\", tostring(properties.status.code), \"\")\n| extend severity = case(assessmentStatusCode =~ \"unhealthy\", tolower(tostring(properties.metadata.severity)), tolower(assessmentStatusCode))\n| extend exemptionType = case(tolower(type) != \"microsoft.security/assessments\",\"N/A\", case(properties.status.cause =~ \"exempt\", \"Yes\", \"No\"))\n| extend source = case(type =~ \"microsoft.security/assessments\", tostring(properties.resourceDetails.Source), \"\")\n| extend stringUntilWorkspaces = extract(\"^(.+)/(.+)/onPremiseMachines/(.+)/providers/Microsoft.Security/assessments/.+$\",1,id)\n| extend resourceId = trim(\" \", tolower(tostring(case(source =~ \"azure\", properties.resourceDetails.Id,\n                                                                            source =~ \"aws\" and isnotempty(tostring(properties.resourceDetails.ConnectorId)), properties.resourceDetails.Id,\n                                                                            source =~ \"aws\", properties.resourceDetails.AzureResourceId,\n                                                                            source =~ \"gcp\", properties.resourceDetails.AzureResourceId,\n                                                                            source =~ \"onpremise\", strcat(stringUntilWorkspaces,\"/workspaceNamePlaceholder/onPremiseMachines/\",properties.resourceDetails.MachineName,\"_\",properties.resourceDetails.VMUUID),\n                                                                            type =~ \"microsoft.security/assessments\", extract(\"^(.+)/providers/Microsoft.Security/assessments/.+$\",1,id),extract(\"^(.+)/providers/Microsoft.Security/softwareInventories/.+$\",1,id)))))\n| extend resourceName = iff(source =~ \"aws\" and isnotempty(tostring(properties.resourceDetails.ConnectorId)), tostring(properties.additionalData.ResourceName), extract(@\"(.+)/(.+)\", 2, resourceId))\n| extend regexResourceId = extract_all(@\"/providers/([^/]+)(?:/([^/]+)/[^/]+(?:/([^/]+)/[^/]+)?)?/([^/]+)/[^/]+$\", resourceId)\n| extend RegexResourceType = regexResourceId[0]\n| extend mainType = RegexResourceType[1], extendedType = RegexResourceType[2], resourceType = RegexResourceType[3]\n| extend providerName = RegexResourceType[0],\n                        mainType = case(mainType !~ \"\", strcat(\"/\",mainType), \"\"),\n                        extendedType = case(extendedType!~ \"\", strcat(\"/\",extendedType), \"\"),\n                        resourceType = case(resourceType!~ \"\", strcat(\"/\",resourceType), \"\")\n| extend array = split(resourceId, '/')\n| extend typeFullPath = case(\n                    array_length(array) == 3, 'subscription',\n                    array_length(array) == 5, 'resourcegroups',\n                    source =~ \"aws\" and isnotempty(tostring(properties.resourceDetails.ConnectorId)), tolower(strcat(providerName, mainType, \"/\", tostring(properties.additionalData.ResourceProvider), tostring(properties.additionalData.ResourceType))),\n                    strcat(providerName, mainType, extendedType, resourceType))\n| extend resourceType = case(typeFullPath =~ 'resourcegroups' or typeFullPath =~ 'subscription', typeFullPath, tolower(trim(\"/\", resourceType)))\n| extend assessmentKey = case(type =~ \"microsoft.security/assessments\", tostring(name), \"\")\n| extend softwareVendorName = case(type =~ \"microsoft.security/softwareInventories\", tostring(properties.vendor), \"\")\n| extend softwareName = case(type =~ \"microsoft.security/softwareInventories\", tostring(properties.softwareName), \"\")\n| extend softwareVersion = case(type =~ \"microsoft.security/softwareInventories\", tostring(properties.version), \"\")\n| extend softwareNameIdentifier = case(type =~ \"microsoft.security/softwareInventories\", strcat(softwareVendorName, \",\", softwareName, \",\", softwareVersion), \"\")\n| extend environment = case(type =~ \"microsoft.security/assessments\", properties.resourceDetails[\"Source\"], \"\")\n| extend environment = case(environment =~ \"onpremise\", tolower(\"Non-Azure\"), tolower(environment))\n| extend osTypeProperty = properties.additionalData[\"OS Type\"]\n| extend osType = case(isnotempty(osTypeProperty), osTypeProperty, \"\")\n| extend hasAgent = case(assessmentKey == \"d1db3318-01ff-16de-29eb-28b344515626\" or assessmentKey == \"45cfe080-ceb1-a91e-9743-71551ed24e94\" or assessmentKey == \"720a3e77-0b9a-4fa9-98b6-ddf0fd7e32c1\" or assessmentKey == \"27ac71b1-75c5-41c2-adc2-858f5db45b08\", assessmentStatusCode, \"\")\n| extend hasAgent = case(((assessmentKey == \"4ab6e3c5-74dd-8b35-9ab9-f61b30875b27\" or assessmentKey == \"181ac480-f7c4-544b-9865-11b8ffe87f47\" or assessmentKey == \"4fb67663-9ab9-475d-b026-8c544cced439\") and (typeFullPath in ('microsoft.hybridcompute/machines', 'microsoft.kubernetes/connectedclusters'))) , \"healthy\", hasAgent)\n| extend workspaceAzureResourceId = case(hasAgent !~ \"\", properties.additionalData[\"Reporting workspace azure id\"], \"\")\n| extend workspaceName = case(workspaceAzureResourceId !~ \"\", extract(@\"(.+)/(.+)\", 2, workspaceAzureResourceId), \"\")\n| extend assessmentDisplayName = case(type =~ \"microsoft.security/assessments\", case(isnotempty(properties.displayName), properties.displayName, properties.metadata.displayName), \"\")\n| extend assessmentIdentifier = case(type =~ \"microsoft.security/assessments\", strcat(assessmentKey, \",\" , assessmentDisplayName, \",\", severity), \"\")\n| summarize assessmentsCount = count() , assessmentsIdentifier = make_list(assessmentIdentifier), softwareNamesIdentifier = make_list(softwareNameIdentifier), hasAgent = max(hasAgent), workspaceName = max(workspaceName), environment = max(environment), osType = max(osType), exemptionType = max(exemptionType)  by resourceId, subscriptionId, resourceName, resourceType, typeFullPath, severity\n| extend packAssessments = pack(severity, assessmentsCount)\n| summarize assessmentsSummary = make_bag(packAssessments), assessmentsIdentifier = make_set(assessmentsIdentifier), softwareNamesIdentifier = make_set(softwareNamesIdentifier), hasAgent = max(hasAgent), workspaceName= max(workspaceName), environment = max(environment), osType= max(osType), exemptionType = max(exemptionType)  by resourceId, subscriptionId, resourceName, resourceType, typeFullPath\n| extend agentMonitoring = case(hasAgent =~ \"NotApplicable\" or hasAgent =~ \"\", '',\n                                                hasAgent =~ \"Unhealthy\", \"notInstalled\",\n                                                \"installed\")\n| join kind=leftouter (\n                    securityresources\n| where type =~ \"microsoft.security/pricings\"\n| project subscriptionId, bundleName = tolower(name), freeTrialRemainingTime = properties.freeTrialRemainingTime, pricingTier = tolower(properties.pricingTier)\n| extend bundlesPricing = pack(bundleName, pricingTier)\n| summarize subscriptionPricing = make_bag(bundlesPricing) by subscriptionId\n                ) on subscriptionId\n| extend hasNoSoftwareData = case(array_length(softwareNamesIdentifier) == 1, case(set_has_element(softwareNamesIdentifier, \"\"), true, false), false)\n| extend softwareNamesIdentifier = case(hasNoSoftwareData, softwareNamesIdentifier, set_difference(softwareNamesIdentifier, pack_array(\"\")))\n| extend AssessmentsHigh = case(isnull(assessmentsSummary.high), 0 , toint(assessmentsSummary.high))\n| extend AssessmentsMedium = case(isnull(assessmentsSummary.medium), 0 , toint(assessmentsSummary.medium))\n| extend AssessmentsLow = case(isnull(assessmentsSummary.low), 0 , toint(assessmentsSummary.low))\n| extend unhealthyAssessmentsCount = AssessmentsHigh + AssessmentsMedium + AssessmentsLow\n| extend virtualmachines = case(isnull(subscriptionPricing), '' , subscriptionPricing.virtualmachines)\n| extend virtualmachines = case(virtualmachines == 'free', 'off', 'on')\n| extend sqlservers = case(isnull(subscriptionPricing), '' , subscriptionPricing.sqlservers)\n| extend sqlservers = case(sqlservers == 'free', 'off', 'on')\n| extend kubernetesservice = case(isnull(subscriptionPricing), '' , subscriptionPricing.kubernetesservice)\n| extend kubernetesservice = case(kubernetesservice == 'free', 'off', 'on')\n| extend containerregistry = case(isnull(subscriptionPricing), '' , subscriptionPricing.containerregistry)\n| extend containerregistry = case(containerregistry == 'free', 'off', 'on')\n| extend connectedcontainerregistry = case(isnull(subscriptionPricing), '' , subscriptionPricing.connectedcontainerregistry)\n| extend connectedcontainerregistry = case(connectedcontainerregistry == 'free', 'off', 'on')\n| extend sqlservervirtualmachines = case(isnull(subscriptionPricing), '' , subscriptionPricing.sqlservervirtualmachines)\n| extend sqlservervirtualmachines = case(sqlservervirtualmachines == 'free', 'off', 'on')\n| extend appservices = case(isnull(subscriptionPricing), '' , subscriptionPricing.appservices)\n| extend appservices = case(appservices == 'free', 'off', 'on')\n| extend storageaccounts = case(isnull(subscriptionPricing), '' , subscriptionPricing.storageaccounts)\n| extend storageaccounts = case(storageaccounts == 'free', 'off', 'on')\n| extend keyvaults = case(isnull(subscriptionPricing), '' , subscriptionPricing.keyvaults)\n| extend keyvaults = case(keyvaults == 'free', 'off', 'on')\n| extend opensourcerelationaldatabases = case(isnull(subscriptionPricing), '' , subscriptionPricing.opensourcerelationaldatabases)\n| extend opensourcerelationaldatabases = case(opensourcerelationaldatabases == 'free', 'off', 'on')\n| extend calculatedSubscriptionPricing = case(resourceType =~ \"subscription\" and isempty(subscriptionPricing) == false , iff(subscriptionPricing has \"free\" and subscriptionPricing has \"standard\", \"partial\", iff(subscriptionPricing has \"free\", \"off\", \"on\")), \"\")\n| extend resourcePricing = case(typeFullPath =~ \"microsoft.classiccompute/virtualmachines\", virtualmachines, typeFullPath =~ \"microsoft.compute/virtualmachines\", virtualmachines, typeFullPath =~ \"microsoft.hybridcompute/machines\", virtualmachines, typeFullPath =~ \"microsoft.sql/servers\", sqlservers, typeFullPath =~ \"microsoft.containerservice/managedclusters\", kubernetesservice, typeFullPath =~ \"microsoft.kubernetes/connectedclusters\", kubernetesservice, typeFullPath =~ \"microsoft.containerregistry/registries\", containerregistry, typeFullPath =~ \"microsoft.security/connectedcontainerregistries\", connectedcontainerregistry, typeFullPath =~ \"microsoft.sqlvirtualmachine/sqlvirtualmachines\", sqlservervirtualmachines, typeFullPath =~ \"microsoft.web/sites\", appservices, typeFullPath =~ \"microsoft.storage/storageaccounts\", storageaccounts, typeFullPath =~ \"microsoft.compute/virtualmachinescalesets\", virtualmachines, typeFullPath =~ \"microsoft.keyvault/vaults\", keyvaults, typeFullPath =~ \"microsoft.dbforpostgresql/servers\", opensourcerelationaldatabases, typeFullPath =~ \"microsoft.dbformysql/servers\", opensourcerelationaldatabases, typeFullPath =~ \"microsoft.dbformariadb/servers\", opensourcerelationaldatabases, calculatedSubscriptionPricing)\n| extend pricing = case(resourceType =~ \"subscription\" , calculatedSubscriptionPricing , resourcePricing)\n| extend selectedSoftware = \"\"\n| project resourceType, exemptionType, typeFullPath, resourceId, resourceName, subscriptionId, environment, osType, workspaceName, agentMonitoring, assessmentsIdentifier, assessmentsSummary, subscriptionPricing, unhealthyAssessmentsCount, pricing, softwareNamesIdentifier, selectedSoftware\n| extend resourceGroup = tolower(tostring(split(resourceId, \"/\")[4]))\n| order by unhealthyAssessmentsCount, subscriptionId, resourceType, resourceId\n| where typeFullPath in ('microsoft.compute/virtualmachines', 'microsoft.hybridcompute/machines')\n| where isnotempty(resourceId)\n| join kind = leftouter (\n    resources\n    | where type =~ \"microsoft.compute/virtualMachines\"\n    | extend powerState = properties.extended.instanceView.powerState.displayStatus\n    | project resourceId = tolower(id), tostring(powerState)\n) on resourceId",
                  "size": 4,
                  "queryType": 1,
                  "resourceType": "microsoft.resourcegraph/resources",
                  "crossComponentResources": [
                    "{subscriptions}"
                  ]
                },
                "customWidth": "1",
                "conditionalVisibilities": [
                  {
                    "parameterName": "lastSeen",
                    "comparison": "isNotEqualTo"
                  },
                  {
                    "parameterName": "workspace",
                    "comparison": "isEqualTo"
                  }
                ],
                "name": "protectionstatus_table"
              },
              {
                "type": 1,
                "content": {
                  "json": "# Machine reporting status details\nThis table is a cumulation of information from Azure Resource Graph and Log Analytics. It shows the reporting status of machines, based on the selection in the *Machine reporting status* pie chart above.\n\n+ The **Log Analytics agent status** column shows if a Log Analytics agent has been installed on a machine.\n+ The **Defender for Severs (Workspace)** column shows if the *Security* solution has been enabled on the Log Analytics workspace a machine is connected to. This solution indicates if *Defender for Servers* has been enabled on the workspace.\n+ The **Defender for SQL (Workspace)** column shows if the *SQL Advanced Threat Protection* solution has been enabled on the Log Analytics workspace a machine is connected to. This solution indicates if *Defender for SQL on machines* has been enabled on the workspace.\n+ The **Defender for Cloud Coverage** column shows if the Microsoft Defender for Cloud plan has been enabled on a machine's subscription.\n",
                  "style": "info"
                },
                "name": "text - 3"
              },
              {
                "type": 3,
                "content": {
                  "version": "KqlItem/1.0",
                  "query": "{\"version\":\"Merge/1.0\",\"merges\":[{\"id\":\"dbbd53d4-d183-472a-a12f-5256ba415132\",\"mergeType\":\"leftouter\",\"leftTable\":\"heartbeat_table\",\"rightTable\":\"protectionstatus_table\",\"leftColumn\":\"ResourceId\",\"rightColumn\":\"resourceId\"}],\"projectRename\":[{\"originalName\":\"[heartbeat_table].ResourceId\",\"mergedName\":\"ResourceId\",\"fromId\":\"dbbd53d4-d183-472a-a12f-5256ba415132\"},{\"originalName\":\"[heartbeat_table].LatestTimestamp\",\"mergedName\":\"LatestTimestamp\",\"fromId\":\"dbbd53d4-d183-472a-a12f-5256ba415132\"},{\"originalName\":\"[protectionstatus_table].powerState\",\"mergedName\":\"powerState\",\"fromId\":\"unknown\"},{\"originalName\":\"[heartbeat_table].SubscriptionId\",\"mergedName\":\"SubscriptionId\",\"fromId\":\"dbbd53d4-d183-472a-a12f-5256ba415132\"},{\"originalName\":\"[protectionstatus_table].resourceType\",\"mergedName\":\"resourceType\",\"fromId\":\"dbbd53d4-d183-472a-a12f-5256ba415132\"},{\"originalName\":\"[protectionstatus_table].exemptionType\",\"mergedName\":\"exemptionType\",\"fromId\":\"dbbd53d4-d183-472a-a12f-5256ba415132\"},{\"originalName\":\"[protectionstatus_table].typeFullPath\",\"mergedName\":\"typeFullPath\",\"fromId\":\"dbbd53d4-d183-472a-a12f-5256ba415132\"},{\"originalName\":\"[protectionstatus_table].resourceId\",\"mergedName\":\"resourceId\",\"fromId\":\"dbbd53d4-d183-472a-a12f-5256ba415132\"},{\"originalName\":\"[protectionstatus_table].resourceName\",\"mergedName\":\"resourceName\",\"fromId\":\"dbbd53d4-d183-472a-a12f-5256ba415132\"},{\"originalName\":\"[protectionstatus_table].subscriptionId\",\"mergedName\":\"subscriptionId\",\"fromId\":\"dbbd53d4-d183-472a-a12f-5256ba415132\"},{\"originalName\":\"[protectionstatus_table].environment\",\"mergedName\":\"environment\",\"fromId\":\"dbbd53d4-d183-472a-a12f-5256ba415132\"},{\"originalName\":\"[protectionstatus_table].osType\",\"mergedName\":\"osType\",\"fromId\":\"dbbd53d4-d183-472a-a12f-5256ba415132\"},{\"originalName\":\"[heartbeat_table].ResourceUri\",\"mergedName\":\"workspaceName\",\"fromId\":\"unknown\"},{\"originalName\":\"[heartbeat_table].DefenderForServersStatus\",\"mergedName\":\"DefenderForServersStatus\",\"fromId\":\"unknown\"},{\"originalName\":\"[heartbeat_table].DefenderForSqlStatus\",\"mergedName\":\"DefenderForSqlStatus\",\"fromId\":\"unknown\"},{\"originalName\":\"[protectionstatus_table].agentMonitoring\",\"mergedName\":\"agentMonitoring\",\"fromId\":\"dbbd53d4-d183-472a-a12f-5256ba415132\"},{\"originalName\":\"[protectionstatus_table].assessmentsIdentifier\",\"mergedName\":\"assessmentsIdentifier\",\"fromId\":\"dbbd53d4-d183-472a-a12f-5256ba415132\"},{\"originalName\":\"[protectionstatus_table].pricing\",\"mergedName\":\"pricing\",\"fromId\":\"dbbd53d4-d183-472a-a12f-5256ba415132\"},{\"originalName\":\"[protectionstatus_table].assessmentsSummary\",\"mergedName\":\"assessmentsSummary\",\"fromId\":\"dbbd53d4-d183-472a-a12f-5256ba415132\"},{\"originalName\":\"[protectionstatus_table].subscriptionPricing\",\"mergedName\":\"subscriptionPricing\",\"fromId\":\"dbbd53d4-d183-472a-a12f-5256ba415132\"},{\"originalName\":\"[protectionstatus_table].unhealthyAssessmentsCount\",\"mergedName\":\"unhealthyAssessmentsCount\",\"fromId\":\"dbbd53d4-d183-472a-a12f-5256ba415132\"},{\"originalName\":\"[protectionstatus_table].softwareNamesIdentifier\",\"mergedName\":\"softwareNamesIdentifier\",\"fromId\":\"dbbd53d4-d183-472a-a12f-5256ba415132\"},{\"originalName\":\"[protectionstatus_table].selectedSoftware\",\"mergedName\":\"selectedSoftware\",\"fromId\":\"dbbd53d4-d183-472a-a12f-5256ba415132\"},{\"originalName\":\"[protectionstatus_table].resourceGroup\",\"mergedName\":\"resourceGroup\",\"fromId\":\"dbbd53d4-d183-472a-a12f-5256ba415132\"},{\"originalName\":\"[protectionstatus_table].resourceId1\",\"mergedName\":\"resourceId1\",\"fromId\":\"unknown\"},{\"originalName\":\"[protectionstatus_table].workspaceName\"}]}",
                  "size": 3,
                  "queryType": 7,
                  "visualization": "table",
                  "gridSettings": {
                    "formatters": [
                      {
                        "columnMatch": "LatestTimestamp",
                        "formatter": 0,
                        "formatOptions": {
                          "customColumnWidthSetting": "21ch"
                        }
                      },
                      {
                        "columnMatch": "powerState",
                        "formatter": 18,
                        "formatOptions": {
                          "thresholdsOptions": "icons",
                          "thresholdsGrid": [
                            {
                              "operator": "contains",
                              "thresholdValue": "running",
                              "representation": "success",
                              "text": "{0}{1}"
                            },
                            {
                              "operator": "contains",
                              "thresholdValue": "deallocated",
                              "representation": "stopped",
                              "text": "{0}{1}"
                            },
                            {
                              "operator": "contains",
                              "thresholdValue": "starting",
                              "representation": "pending",
                              "text": "{0}{1}"
                            },
                            {
                              "operator": "contains",
                              "thresholdValue": "stopping",
                              "representation": "pending",
                              "text": "{0}{1}"
                            },
                            {
                              "operator": "Default",
                              "thresholdValue": null,
                              "representation": "unknown",
                              "text": "{0}{1}"
                            }
                          ]
                        }
                      },
                      {
                        "columnMatch": "SubscriptionId",
                        "formatter": 0,
                        "formatOptions": {
                          "customColumnWidthSetting": "38ch"
                        }
                      },
                      {
                        "columnMatch": "resourceType",
                        "formatter": 5,
                        "formatOptions": {
                          "customColumnWidthSetting": "19ch"
                        }
                      },
                      {
                        "columnMatch": "exemptionType",
                        "formatter": 5
                      },
                      {
                        "columnMatch": "typeFullPath",
                        "formatter": 5
                      },
                      {
                        "columnMatch": "resourceId",
                        "formatter": 5
                      },
                      {
                        "columnMatch": "resourceName",
                        "formatter": 5
                      },
                      {
                        "columnMatch": "subscriptionId",
                        "formatter": 5
                      },
                      {
                        "columnMatch": "DefenderForServersStatus",
                        "formatter": 18,
                        "formatOptions": {
                          "thresholdsOptions": "icons",
                          "thresholdsGrid": [
                            {
                              "operator": "==",
                              "thresholdValue": "enabled",
                              "representation": "success",
                              "text": "{0}{1}"
                            },
                            {
                              "operator": "Default",
                              "thresholdValue": null,
                              "representation": "3",
                              "text": "{0}{1}"
                            }
                          ]
                        },
                        "tooltipFormat": {
                          "tooltip": "This column shows if the Security solution for Microsoft Defender for Servers has been enabled on the workspace a machine's agent is connected to."
                        }
                      },
                      {
                        "columnMatch": "DefenderForSqlStatus",
                        "formatter": 18,
                        "formatOptions": {
                          "thresholdsOptions": "icons",
                          "thresholdsGrid": [
                            {
                              "operator": "==",
                              "thresholdValue": "enabled",
                              "representation": "success",
                              "text": "{0}{1}"
                            },
                            {
                              "operator": "Default",
                              "thresholdValue": null,
                              "representation": "3",
                              "text": "{0}{1}"
                            }
                          ]
                        },
                        "tooltipFormat": {
                          "tooltip": "This column shows if the SQLAdvancedThreatProtection solution for Microsoft Defender for SQL has been enabled on the workspace a machine's agent is connected to."
                        }
                      },
                      {
                        "columnMatch": "agentMonitoring",
                        "formatter": 18,
                        "formatOptions": {
                          "thresholdsOptions": "icons",
                          "thresholdsGrid": [
                            {
                              "operator": "==",
                              "thresholdValue": "installed",
                              "representation": "success",
                              "text": "{0}{1}"
                            },
                            {
                              "operator": "==",
                              "thresholdValue": "notInstalled",
                              "representation": "disabled",
                              "text": "{0}{1}"
                            },
                            {
                              "operator": "==",
                              "thresholdValue": "failed",
                              "representation": "3",
                              "text": "{0}{1}"
                            },
                            {
                              "operator": "==",
                              "thresholdValue": "notApplicable",
                              "representation": "cancelled",
                              "text": "{0}{1}"
                            },
                            {
                              "operator": "Default",
                              "thresholdValue": null,
                              "representation": "cancelled",
                              "text": "notApplicable"
                            }
                          ]
                        }
                      },
                      {
                        "columnMatch": "assessmentsIdentifier",
                        "formatter": 5
                      },
                      {
                        "columnMatch": "pricing",
                        "formatter": 18,
                        "formatOptions": {
                          "thresholdsOptions": "icons",
                          "thresholdsGrid": [
                            {
                              "operator": "==",
                              "thresholdValue": "on",
                              "representation": "success",
                              "text": "{0}{1}"
                            },
                            {
                              "operator": "Default",
                              "thresholdValue": null,
                              "representation": "disabled",
                              "text": "{0}{1}"
                            }
                          ]
                        }
                      },
                      {
                        "columnMatch": "assessmentsSummary",
                        "formatter": 5
                      },
                      {
                        "columnMatch": "subscriptionPricing",
                        "formatter": 5
                      },
                      {
                        "columnMatch": "unhealthyAssessmentsCount",
                        "formatter": 3,
                        "formatOptions": {
                          "min": 0,
                          "max": 15,
                          "palette": "greenRed",
                          "customColumnWidthSetting": "200px"
                        }
                      },
                      {
                        "columnMatch": "softwareNamesIdentifier",
                        "formatter": 5
                      },
                      {
                        "columnMatch": "selectedSoftware",
                        "formatter": 5
                      },
                      {
                        "columnMatch": "resourceGroup",
                        "formatter": 5
                      }
                    ],
                    "labelSettings": [
                      {
                        "columnId": "ResourceId",
                        "label": "Resource ID"
                      },
                      {
                        "columnId": "LatestTimestamp",
                        "label": "Latest Heartbeat"
                      },
                      {
                        "columnId": "powerState",
                        "label": "Power State"
                      },
                      {
                        "columnId": "SubscriptionId",
                        "label": "Subscription ID"
                      },
                      {
                        "columnId": "environment",
                        "label": "Environment"
                      },
                      {
                        "columnId": "osType",
                        "label": "OS Type"
                      },
                      {
                        "columnId": "workspaceName",
                        "label": "Workspace Name"
                      },
                      {
                        "columnId": "DefenderForServersStatus",
                        "label": "Defender for Servers (Workspace)"
                      },
                      {
                        "columnId": "DefenderForSqlStatus",
                        "label": "Defender for SQL (Workspace)"
                      },
                      {
                        "columnId": "agentMonitoring",
                        "label": "Agent status"
                      },
                      {
                        "columnId": "pricing",
                        "label": "Defender for Cloud Coverage"
                      },
                      {
                        "columnId": "unhealthyAssessmentsCount",
                        "label": "Open recommendations"
                      },
                      {
                        "columnId": "resourceGroup",
                        "label": "Resource Group"
                      }
                    ]
                  }
                },
                "conditionalVisibility": {
                  "parameterName": "lastSeen",
                  "comparison": "isNotEqualTo"
                },
                "name": "query - 2"
              }
            ]
          },
          "conditionalVisibility": {
            "parameterName": "lastSeen",
            "comparison": "isNotEqualTo"
          },
          "name": "group - 5",
          "styleSettings": {
            "showBorder": true
          }
        },
        {
          "type": 12,
          "content": {
            "version": "NotebookGroup/1.0",
            "groupType": "editable",
            "title": "Defender for Cloud coverage details",
            "items": [
              {
                "type": 1,
                "content": {
                  "json": "# Defender for Cloud coverage details\nThis table shows machines that are covered by Microsoft Defender for Cloud and if Defender for Servers or Defender for SQL has been enabled, based on the selection in the *Defender for Cloud coverage* pie chart above.\n",
                  "style": "info"
                },
                "name": "text - 1"
              },
              {
                "type": 3,
                "content": {
                  "version": "KqlItem/1.0",
                  "query": "securityresources\n| where type =~ \"microsoft.security/assessments\" or type =~ \"microsoft.security/softwareInventories\"\n| extend assessmentStatusCode = case(type =~ \"microsoft.security/assessments\", tostring(properties.status.code), \"\")\n| extend severity = case(assessmentStatusCode =~ \"unhealthy\", tolower(tostring(properties.metadata.severity)), tolower(assessmentStatusCode))\n| extend exemptionType = case(tolower(type) != \"microsoft.security/assessments\",\"N/A\", case(properties.status.cause =~ \"exempt\", \"Yes\", \"No\"))\n| extend source = case(type =~ \"microsoft.security/assessments\", tostring(properties.resourceDetails.Source), \"\")\n| extend stringUntilWorkspaces = extract(\"^(.+)/(.+)/onPremiseMachines/(.+)/providers/Microsoft.Security/assessments/.+$\",1,id)\n| extend resourceId = trim(\" \", tolower(tostring(case(source =~ \"azure\", properties.resourceDetails.Id,\n                                                                            source =~ \"aws\" and isnotempty(tostring(properties.resourceDetails.ConnectorId)), properties.resourceDetails.Id,\n                                                                            source =~ \"aws\", properties.resourceDetails.AzureResourceId,\n                                                                            source =~ \"gcp\", properties.resourceDetails.AzureResourceId,\n                                                                            source =~ \"onpremise\", strcat(stringUntilWorkspaces,\"/workspaceNamePlaceholder/onPremiseMachines/\",properties.resourceDetails.MachineName,\"_\",properties.resourceDetails.VMUUID),\n                                                                            type =~ \"microsoft.security/assessments\", extract(\"^(.+)/providers/Microsoft.Security/assessments/.+$\",1,id),extract(\"^(.+)/providers/Microsoft.Security/softwareInventories/.+$\",1,id)))))\n| extend resourceName = iff(source =~ \"aws\" and isnotempty(tostring(properties.resourceDetails.ConnectorId)), tostring(properties.additionalData.ResourceName), extract(@\"(.+)/(.+)\", 2, resourceId))\n| extend regexResourceId = extract_all(@\"/providers/([^/]+)(?:/([^/]+)/[^/]+(?:/([^/]+)/[^/]+)?)?/([^/]+)/[^/]+$\", resourceId)\n| extend RegexResourceType = regexResourceId[0]\n| extend mainType = RegexResourceType[1], extendedType = RegexResourceType[2], resourceType = RegexResourceType[3]\n| extend providerName = RegexResourceType[0],\n                        mainType = case(mainType !~ \"\", strcat(\"/\",mainType), \"\"),\n                        extendedType = case(extendedType!~ \"\", strcat(\"/\",extendedType), \"\"),\n                        resourceType = case(resourceType!~ \"\", strcat(\"/\",resourceType), \"\")\n| extend array = split(resourceId, '/')\n| extend typeFullPath = case(\n                    array_length(array) == 3, 'subscription',\n                    array_length(array) == 5, 'resourcegroups',\n                    source =~ \"aws\" and isnotempty(tostring(properties.resourceDetails.ConnectorId)), tolower(strcat(providerName, mainType, \"/\", tostring(properties.additionalData.ResourceProvider), tostring(properties.additionalData.ResourceType))),\n                    strcat(providerName, mainType, extendedType, resourceType))\n| extend resourceType = case(typeFullPath =~ 'resourcegroups' or typeFullPath =~ 'subscription', typeFullPath, tolower(trim(\"/\", resourceType)))\n| extend assessmentKey = case(type =~ \"microsoft.security/assessments\", tostring(name), \"\")\n| extend softwareVendorName = case(type =~ \"microsoft.security/softwareInventories\", tostring(properties.vendor), \"\")\n| extend softwareName = case(type =~ \"microsoft.security/softwareInventories\", tostring(properties.softwareName), \"\")\n| extend softwareVersion = case(type =~ \"microsoft.security/softwareInventories\", tostring(properties.version), \"\")\n| extend softwareNameIdentifier = case(type =~ \"microsoft.security/softwareInventories\", strcat(softwareVendorName, \",\", softwareName, \",\", softwareVersion), \"\")\n| extend environment = case(type =~ \"microsoft.security/assessments\", properties.resourceDetails[\"Source\"], \"\")\n| extend environment = case(environment =~ \"onpremise\", tolower(\"Non-Azure\"), tolower(environment))\n| extend osTypeProperty = properties.additionalData[\"OS Type\"]\n| extend osType = case(isnotempty(osTypeProperty), osTypeProperty, \"\")\n| extend hasAgent = case(assessmentKey == \"d1db3318-01ff-16de-29eb-28b344515626\" or assessmentKey == \"45cfe080-ceb1-a91e-9743-71551ed24e94\" or assessmentKey == \"720a3e77-0b9a-4fa9-98b6-ddf0fd7e32c1\" or assessmentKey == \"27ac71b1-75c5-41c2-adc2-858f5db45b08\", assessmentStatusCode, \"\")\n| extend hasAgent = case(((assessmentKey == \"4ab6e3c5-74dd-8b35-9ab9-f61b30875b27\" or assessmentKey == \"181ac480-f7c4-544b-9865-11b8ffe87f47\" or assessmentKey == \"4fb67663-9ab9-475d-b026-8c544cced439\") and (typeFullPath in ('microsoft.hybridcompute/machines', 'microsoft.kubernetes/connectedclusters'))) , \"healthy\", hasAgent)\n| extend workspaceAzureResourceId = case(hasAgent !~ \"\", properties.additionalData[\"Reporting workspace azure id\"], \"\")\n| extend workspaceName = case(workspaceAzureResourceId !~ \"\", extract(@\"(.+)/(.+)\", 2, workspaceAzureResourceId), \"\")\n| extend assessmentDisplayName = case(type =~ \"microsoft.security/assessments\", case(isnotempty(properties.displayName), properties.displayName, properties.metadata.displayName), \"\")\n| extend assessmentIdentifier = case(type =~ \"microsoft.security/assessments\", strcat(assessmentKey, \",\" , assessmentDisplayName, \",\", severity), \"\")\n| summarize assessmentsCount = count() , assessmentsIdentifier = make_list(assessmentIdentifier), softwareNamesIdentifier = make_list(softwareNameIdentifier), hasAgent = max(hasAgent), workspaceName = max(workspaceName), environment = max(environment), osType = max(osType), exemptionType = max(exemptionType)  by resourceId, subscriptionId, resourceName, resourceType, typeFullPath, severity\n| extend packAssessments = pack(severity, assessmentsCount)\n| summarize assessmentsSummary = make_bag(packAssessments), assessmentsIdentifier = make_set(assessmentsIdentifier), softwareNamesIdentifier = make_set(softwareNamesIdentifier), hasAgent = max(hasAgent), workspaceName= max(workspaceName), environment = max(environment), osType= max(osType), exemptionType = max(exemptionType)  by resourceId, subscriptionId, resourceName, resourceType, typeFullPath\n| extend agentMonitoring = case(hasAgent =~ \"NotApplicable\" or hasAgent =~ \"\", '',\n                                                hasAgent =~ \"Unhealthy\", \"notInstalled\",\n                                                \"installed\")\n| join kind=leftouter (\n                    securityresources\n| where type =~ \"microsoft.security/pricings\"\n| project subscriptionId, bundleName = tolower(name), freeTrialRemainingTime = properties.freeTrialRemainingTime, pricingTier = tolower(properties.pricingTier)\n| extend bundlesPricing = pack(bundleName, pricingTier)\n| summarize subscriptionPricing = make_bag(bundlesPricing) by subscriptionId\n                ) on subscriptionId\n| extend hasNoSoftwareData = case(array_length(softwareNamesIdentifier) == 1, case(set_has_element(softwareNamesIdentifier, \"\"), true, false), false)\n| extend softwareNamesIdentifier = case(hasNoSoftwareData, softwareNamesIdentifier, set_difference(softwareNamesIdentifier, pack_array(\"\")))\n| extend AssessmentsHigh = case(isnull(assessmentsSummary.high), 0 , toint(assessmentsSummary.high))\n| extend AssessmentsMedium = case(isnull(assessmentsSummary.medium), 0 , toint(assessmentsSummary.medium))\n| extend AssessmentsLow = case(isnull(assessmentsSummary.low), 0 , toint(assessmentsSummary.low))\n| extend unhealthyAssessmentsCount = AssessmentsHigh + AssessmentsMedium + AssessmentsLow\n| extend virtualmachines = case(isnull(subscriptionPricing), '' , subscriptionPricing.virtualmachines)\n| extend virtualmachines = case(virtualmachines == 'free', 'off', 'on')\n| extend sqlservers = case(isnull(subscriptionPricing), '' , subscriptionPricing.sqlservers)\n| extend sqlservers = case(sqlservers == 'free', 'off', 'on')\n| extend kubernetesservice = case(isnull(subscriptionPricing), '' , subscriptionPricing.kubernetesservice)\n| extend kubernetesservice = case(kubernetesservice == 'free', 'off', 'on')\n| extend containerregistry = case(isnull(subscriptionPricing), '' , subscriptionPricing.containerregistry)\n| extend containerregistry = case(containerregistry == 'free', 'off', 'on')\n| extend connectedcontainerregistry = case(isnull(subscriptionPricing), '' , subscriptionPricing.connectedcontainerregistry)\n| extend connectedcontainerregistry = case(connectedcontainerregistry == 'free', 'off', 'on')\n| extend sqlservervirtualmachines = case(isnull(subscriptionPricing), '' , subscriptionPricing.sqlservervirtualmachines)\n| extend sqlservervirtualmachines = case(sqlservervirtualmachines == 'free', 'off', 'on')\n| extend appservices = case(isnull(subscriptionPricing), '' , subscriptionPricing.appservices)\n| extend appservices = case(appservices == 'free', 'off', 'on')\n| extend storageaccounts = case(isnull(subscriptionPricing), '' , subscriptionPricing.storageaccounts)\n| extend storageaccounts = case(storageaccounts == 'free', 'off', 'on')\n| extend keyvaults = case(isnull(subscriptionPricing), '' , subscriptionPricing.keyvaults)\n| extend keyvaults = case(keyvaults == 'free', 'off', 'on')\n| extend opensourcerelationaldatabases = case(isnull(subscriptionPricing), '' , subscriptionPricing.opensourcerelationaldatabases)\n| extend opensourcerelationaldatabases = case(opensourcerelationaldatabases == 'free', 'off', 'on')\n| extend calculatedSubscriptionPricing = case(resourceType =~ \"subscription\" and isempty(subscriptionPricing) == false , iff(subscriptionPricing has \"free\" and subscriptionPricing has \"standard\", \"partial\", iff(subscriptionPricing has \"free\", \"off\", \"on\")), \"\")\n| extend resourcePricing = case(typeFullPath =~ \"microsoft.classiccompute/virtualmachines\", virtualmachines, typeFullPath =~ \"microsoft.compute/virtualmachines\", virtualmachines, typeFullPath =~ \"microsoft.hybridcompute/machines\", virtualmachines, typeFullPath =~ \"microsoft.sql/servers\", sqlservers, typeFullPath =~ \"microsoft.containerservice/managedclusters\", kubernetesservice, typeFullPath =~ \"microsoft.kubernetes/connectedclusters\", kubernetesservice, typeFullPath =~ \"microsoft.containerregistry/registries\", containerregistry, typeFullPath =~ \"microsoft.security/connectedcontainerregistries\", connectedcontainerregistry, typeFullPath =~ \"microsoft.sqlvirtualmachine/sqlvirtualmachines\", sqlservervirtualmachines, typeFullPath =~ \"microsoft.web/sites\", appservices, typeFullPath =~ \"microsoft.storage/storageaccounts\", storageaccounts, typeFullPath =~ \"microsoft.compute/virtualmachinescalesets\", virtualmachines, typeFullPath =~ \"microsoft.keyvault/vaults\", keyvaults, typeFullPath =~ \"microsoft.dbforpostgresql/servers\", opensourcerelationaldatabases, typeFullPath =~ \"microsoft.dbformysql/servers\", opensourcerelationaldatabases, typeFullPath =~ \"microsoft.dbformariadb/servers\", opensourcerelationaldatabases, calculatedSubscriptionPricing)\n| extend pricing = case(resourceType =~ \"subscription\" , calculatedSubscriptionPricing , resourcePricing)\n| extend selectedSoftware = \"\"\n| project resourceType, exemptionType, typeFullPath, resourceId, resourceName, subscriptionId, environment, osType, workspaceName, agentMonitoring, assessmentsIdentifier, assessmentsSummary, subscriptionPricing, unhealthyAssessmentsCount, pricing, softwareNamesIdentifier, selectedSoftware\n| extend resourceGroup = tolower(tostring(split(resourceId, \"/\")[4]))\n| order by unhealthyAssessmentsCount, subscriptionId, resourceType, resourceId\n| where typeFullPath in ('microsoft.compute/virtualmachines', 'microsoft.hybridcompute/machines')\n| where isnotempty(resourceId) and pricing == parse_json('{defenderStatus}').series\n| join kind = leftouter (\n    resources\n    | where type =~ \"microsoft.compute/virtualMachines\"\n    | extend powerState = properties.extended.instanceView.powerState.displayStatus\n    | project resourceId = tolower(id), tostring(powerState)\n) on resourceId",
                  "size": 3,
                  "queryType": 1,
                  "resourceType": "microsoft.resourcegraph/resources",
                  "crossComponentResources": [
                    "{subscriptions}"
                  ],
                  "gridSettings": {
                    "formatters": [
                      {
                        "columnMatch": "resourceType",
                        "formatter": 5
                      },
                      {
                        "columnMatch": "exemptionType",
                        "formatter": 5
                      },
                      {
                        "columnMatch": "typeFullPath",
                        "formatter": 5
                      },
                      {
                        "columnMatch": "resourceName",
                        "formatter": 5
                      },
                      {
                        "columnMatch": "agentMonitoring",
                        "formatter": 18,
                        "formatOptions": {
                          "thresholdsOptions": "icons",
                          "thresholdsGrid": [
                            {
                              "operator": "==",
                              "thresholdValue": "installed",
                              "representation": "success",
                              "text": "{0}{1}"
                            },
                            {
                              "operator": "==",
                              "thresholdValue": "notInstalled",
                              "representation": "disabled",
                              "text": "{0}{1}"
                            },
                            {
                              "operator": "==",
                              "thresholdValue": "Unhealthy",
                              "representation": "2",
                              "text": "{0}{1}"
                            },
                            {
                              "operator": "==",
                              "thresholdValue": "notApplicable",
                              "representation": "cancelled",
                              "text": "{0}{1}"
                            },
                            {
                              "operator": "Default",
                              "thresholdValue": null,
                              "representation": "cancelled",
                              "text": "notApplicable"
                            }
                          ]
                        }
                      },
                      {
                        "columnMatch": "assessmentsIdentifier",
                        "formatter": 5
                      },
                      {
                        "columnMatch": "assessmentsSummary",
                        "formatter": 5
                      },
                      {
                        "columnMatch": "subscriptionPricing",
                        "formatter": 5
                      },
                      {
                        "columnMatch": "unhealthyAssessmentsCount",
                        "formatter": 3,
                        "formatOptions": {
                          "min": 0,
                          "max": 15,
                          "palette": "greenRed"
                        }
                      },
                      {
                        "columnMatch": "pricing",
                        "formatter": 18,
                        "formatOptions": {
                          "thresholdsOptions": "icons",
                          "thresholdsGrid": [
                            {
                              "operator": "==",
                              "thresholdValue": "on",
                              "representation": "success",
                              "text": "{0}{1}"
                            },
                            {
                              "operator": "==",
                              "thresholdValue": "off",
                              "representation": "disabled",
                              "text": "{0}{1}"
                            },
                            {
                              "operator": "Default",
                              "thresholdValue": null,
                              "representation": "disabled",
                              "text": "{0}{1}"
                            }
                          ]
                        }
                      },
                      {
                        "columnMatch": "softwareNamesIdentifier",
                        "formatter": 5
                      },
                      {
                        "columnMatch": "selectedSoftware",
                        "formatter": 5
                      },
                      {
                        "columnMatch": "resourceGroup",
                        "formatter": 5
                      },
                      {
                        "columnMatch": "resourceId1",
                        "formatter": 5
                      },
                      {
                        "columnMatch": "powerState",
                        "formatter": 18,
                        "formatOptions": {
                          "thresholdsOptions": "icons",
                          "thresholdsGrid": [
                            {
                              "operator": "contains",
                              "thresholdValue": "running",
                              "representation": "success",
                              "text": "{0}{1}"
                            },
                            {
                              "operator": "contains",
                              "thresholdValue": "deallocated",
                              "representation": "stopped",
                              "text": "{0}{1}"
                            },
                            {
                              "operator": "contains",
                              "thresholdValue": "starting",
                              "representation": "pending",
                              "text": "{0}{1}"
                            },
                            {
                              "operator": "contains",
                              "thresholdValue": "stopping",
                              "representation": "pending",
                              "text": "{0}{1}"
                            },
                            {
                              "operator": "Default",
                              "thresholdValue": null,
                              "representation": "unknown",
                              "text": "{0}{1}"
                            }
                          ]
                        }
                      }
                    ],
                    "labelSettings": [
                      {
                        "columnId": "resourceId",
                        "label": "Resource ID"
                      },
                      {
                        "columnId": "resourceName",
                        "label": "Resource Name"
                      },
                      {
                        "columnId": "subscriptionId",
                        "label": "Subscription ID"
                      },
                      {
                        "columnId": "environment",
                        "label": "Environment"
                      },
                      {
                        "columnId": "osType",
                        "label": "OS Type"
                      },
                      {
                        "columnId": "workspaceName",
                        "label": "Workspace Name"
                      },
                      {
                        "columnId": "agentMonitoring",
                        "label": "Agent Status"
                      },
                      {
                        "columnId": "unhealthyAssessmentsCount",
                        "label": "Open Recommendations"
                      },
                      {
                        "columnId": "pricing",
                        "label": "Defender for Cloud Coverage"
                      },
                      {
                        "columnId": "resourceGroup",
                        "label": "Resource Group"
                      },
                      {
                        "columnId": "powerState",
                        "label": "Power State"
                      }
                    ]
                  }
                },
                "name": "query - 0 - Copy"
              }
            ]
          },
          "conditionalVisibility": {
            "parameterName": "defenderStatus",
            "comparison": "isNotEqualTo"
          },
          "name": "Microsoft Defender for Cloud coverage details",
          "styleSettings": {
            "showBorder": true
          }
        },
        {
          "type": 12,
          "content": {
            "version": "NotebookGroup/1.0",
            "groupType": "editable",
            "items": [
              {
                "type": 12,
                "content": {
                  "version": "NotebookGroup/1.0",
                  "groupType": "editable",
                  "title": "Log Analytics workspace overview",
                  "items": [
                    {
                      "type": 1,
                      "content": {
                        "json": "Microsoft Defender for servers brings threat detection and advanced defenses for your Windows and Linux machines.\nWith this optional Defender for Cloud plan enabled on your subscriptions but not on your workspaces, you're paying for the full capability of Microsoft Defender for servers but missing out on some of the benefits.\n\nMicrosoft Defender for SQL on machines extends the protections for your Azure-native SQL Servers to fully support hybrid environments and protect SQL servers (all supported version) hosted in Azure, other cloud environments, and even on-premises machines.\nIt's not enough to enable this optional Defender for Cloud plan on a subscription; it must also be enabled on the workspace. Until you enable the plan on the workspace too, it won't protect your SQL servers.\n\nIn order to take advantage of all the benefits from Microsoft Defender for Servers and SQL, the Defender for Cloud plans for SQL and Servers need to be enabled on both, your Azure subscription and the Log Analytics workspace. This section of the workbook gives you an overview of your Log Analytics workspaces (total) and if one, both, or none of the solutions have been enabled on them. In addition, the table shows workspaces only that are used by Defender for Cloud and if you should enable an additional Defender plan on them.\nFor more information please take a look at the [Microsoft Defender for Cloud documentation](https://docs.microsoft.com/en-us/azure/security-center/faq-data-collection-agents#what-is-the-impact-of-removing-these-extensions-).",
                        "style": "info"
                      },
                      "name": "text - 2"
                    },
                    {
                      "type": 3,
                      "content": {
                        "version": "KqlItem/1.0",
                        "query": "resources\n| where type =~ 'microsoft.operationalinsights/workspaces'\n| extend workspaceId = tolower(['id'])\n| join kind = leftouter ( \n    resources\n| where type == \"microsoft.operationsmanagement/solutions\"  and ['plan']['product'] =~ \"OMSGallery/Security\" or ['plan']['product'] =~ \"OMSGallery/SQLAdvancedThreatProtection\"\n| extend workspaceId = tolower(['properties']['workspaceResourceId'])\n) on workspaceId\n| extend defenderForServers = case(['plan1']['product'] =~ \"OMSGallery/Security\", 1, int(null)), defenderForSql = case(['plan1']['product'] =~ \"OMSGallery/SQLAdvancedThreatProtection\", 1, int(null))\n| summarize entries = make_list(pack_all()) by id\n| extend defenderForServers = case(\n        ['entries'][0]['defenderForServers'] == 1, 1,\n        ['entries'][1]['defenderForServers'] == 1, 1,\n        int(null)\n    ),\n    defenderForSQL = case(\n        ['entries'][0]['defenderForSql'] == 1, 1,\n        ['entries'][1]['defenderForSql'] == 1, 1,\n        int(null)\n    )\n| extend solutionStatus = case (\n    defenderForSQL == 1 and not(defenderForServers == 1), \"Defender for SQL enabled\",\n    defenderForServers == 1 and not(defenderForSQL== 1), \"Defender for Servers enabled\",\n    defenderForSQL == 1 and defenderForServers == 1, \"both plans enabled\",\n    \"no solutions found\"\n)\n| summarize dcount(['id']) by solutionStatus",
                        "size": 3,
                        "title": "Workspaces with Defender solution status (total)",
                        "queryType": 1,
                        "resourceType": "microsoft.resourcegraph/resources",
                        "crossComponentResources": [
                          "{subscriptions}"
                        ],
                        "visualization": "piechart",
                        "gridSettings": {
                          "formatters": [
                            {
                              "columnMatch": "id",
                              "formatter": 0,
                              "formatOptions": {
                                "customColumnWidthSetting": "75ch"
                              }
                            },
                            {
                              "columnMatch": "defenderForServers",
                              "formatter": 18,
                              "formatOptions": {
                                "thresholdsOptions": "icons",
                                "thresholdsGrid": [
                                  {
                                    "operator": "==",
                                    "thresholdValue": "1",
                                    "representation": "success",
                                    "text": "enabled"
                                  },
                                  {
                                    "operator": "Default",
                                    "thresholdValue": null,
                                    "representation": "4",
                                    "text": "disabled"
                                  }
                                ]
                              }
                            },
                            {
                              "columnMatch": "defenderForSQL",
                              "formatter": 18,
                              "formatOptions": {
                                "thresholdsOptions": "icons",
                                "thresholdsGrid": [
                                  {
                                    "operator": "==",
                                    "thresholdValue": "1",
                                    "representation": "success",
                                    "text": "enabled"
                                  },
                                  {
                                    "operator": "Default",
                                    "thresholdValue": null,
                                    "representation": "critical",
                                    "text": "disabled"
                                  }
                                ]
                              }
                            }
                          ],
                          "filter": true
                        },
                        "sortBy": [],
                        "chartSettings": {
                          "seriesLabelSettings": [
                            {
                              "seriesName": "both plans enabled",
                              "color": "green"
                            },
                            {
                              "seriesName": "no solutions found",
                              "color": "redBright"
                            },
                            {
                              "seriesName": "Defender for Servers enabled",
                              "color": "yellow"
                            },
                            {
                              "seriesName": "Defender for SQL enabled",
                              "color": "orange"
                            }
                          ]
                        }
                      },
                      "customWidth": "30",
                      "name": "workspacesPie",
                      "styleSettings": {
                        "showBorder": true
                      }
                    },
                    {
                      "type": 3,
                      "content": {
                        "version": "KqlItem/1.0",
                        "query": "securityresources\n| where type == \"microsoft.security/assessments\"\n| extend source = trim(' ', tolower(tostring(properties.resourceDetails.Source)))\n| extend resourceId = trim(' ', tolower(tostring(case(\n                                                                                    source =~ \"azure\", properties.resourceDetails.Id,\n                                                                                    source =~ \"aws\" and isnotempty(tostring(properties.resourceDetails.ConnectorId)), properties.resourceDetails.Id,\n                                                                                    source =~ 'aws', properties.resourceDetails.AzureResourceId,\n                                                                                    source =~ 'gcp', properties.resourceDetails.AzureResourceId,\n                                                                                    extract('^(.+)/providers/Microsoft.Security/assessments/.+$',1,id)\n                                                                                    ))))\n| extend status = trim(\" \", tostring(properties.status.code))\n| extend cause = trim(\" \", tostring(properties.status.cause))\n| extend assessmentKey = tostring(name)\n| where assessmentKey == \"e9c320f1-03a0-4d2b-9a37-84b3bdc2e281\"\n| project resourceId, SQLSolution = status, machines = ['properties'].['additionalData'].['Number Of Reporting Machines']\n| order by toint(machines)",
                        "size": 4,
                        "queryType": 1,
                        "resourceType": "microsoft.resourcegraph/resources",
                        "crossComponentResources": [
                          "{subscriptions}"
                        ]
                      },
                      "customWidth": "10",
                      "conditionalVisibility": {
                        "parameterName": "blank",
                        "comparison": "isNotEqualTo"
                      },
                      "name": "defenderForSQL"
                    },
                    {
                      "type": 3,
                      "content": {
                        "version": "KqlItem/1.0",
                        "query": "securityresources\n| where type == \"microsoft.security/assessments\"\n| extend source = trim(' ', tolower(tostring(properties.resourceDetails.Source)))\n| extend resourceId = trim(' ', tolower(tostring(case(\n                                                                                    source =~ \"azure\", properties.resourceDetails.Id,\n                                                                                    source =~ \"aws\" and isnotempty(tostring(properties.resourceDetails.ConnectorId)), properties.resourceDetails.Id,\n                                                                                    source =~ 'aws', properties.resourceDetails.AzureResourceId,\n                                                                                    source =~ 'gcp', properties.resourceDetails.AzureResourceId,\n                                                                                    extract('^(.+)/providers/Microsoft.Security/assessments/.+$',1,id)\n                                                                                    ))))\n| extend status = trim(\" \", tostring(properties.status.code))\n| extend cause = trim(\" \", tostring(properties.status.cause))\n| extend assessmentKey = tostring(name)\n| where assessmentKey == \"1ce68079-b783-4404-b341-d2851d6f0fa2\"\n| project resourceId, ServerSolution = status, machines = ['properties'].['additionalData'].['Number Of Reporting Machines']\n| order by toint(machines)",
                        "size": 4,
                        "queryType": 1,
                        "resourceType": "microsoft.resourcegraph/resources",
                        "crossComponentResources": [
                          "{subscriptions}"
                        ]
                      },
                      "customWidth": "10",
                      "conditionalVisibility": {
                        "parameterName": "blank",
                        "comparison": "isNotEqualTo"
                      },
                      "name": "defenderForServers"
                    },
                    {
                      "type": 3,
                      "content": {
                        "version": "KqlItem/1.0",
                        "query": "{\"version\":\"Merge/1.0\",\"merges\":[{\"id\":\"740011e0-fce7-49cb-84c9-244fd52de0b5\",\"mergeType\":\"outer\",\"leftTable\":\"defenderForServers\",\"rightTable\":\"defenderForSQL\",\"leftColumn\":\"resourceId\",\"rightColumn\":\"resourceId\"}],\"projectRename\":[{\"originalName\":\"[Added column]\",\"mergedName\":\"Workspace name\",\"fromId\":null,\"isNewItem\":true,\"newItemData\":[{\"criteriaContext\":{\"leftOperand\":\"resourceId\",\"operator\":\"isNotNull\",\"rightValType\":\"column\",\"resultValType\":\"column\",\"resultVal\":\"resourceId\"}},{\"criteriaContext\":{\"operator\":\"Default\",\"rightValType\":\"column\",\"resultValType\":\"column\",\"resultVal\":\"resourceId1\"}}]},{\"originalName\":\"[defenderForServers].resourceId\",\"mergedName\":\"resourceId\",\"fromId\":\"740011e0-fce7-49cb-84c9-244fd52de0b5\"},{\"originalName\":\"[defenderForServers].ServerSolution\",\"mergedName\":\"ServerSolution\",\"fromId\":\"740011e0-fce7-49cb-84c9-244fd52de0b5\"},{\"originalName\":\"[defenderForServers].machines\",\"mergedName\":\"machines\",\"fromId\":\"740011e0-fce7-49cb-84c9-244fd52de0b5\"},{\"originalName\":\"[defenderForSQL].resourceId\",\"mergedName\":\"resourceId1\",\"fromId\":\"740011e0-fce7-49cb-84c9-244fd52de0b5\"},{\"originalName\":\"[defenderForSQL].SQLSolution\",\"mergedName\":\"SQLSolution\",\"fromId\":\"740011e0-fce7-49cb-84c9-244fd52de0b5\"},{\"originalName\":\"[defenderForSQL].machines\",\"mergedName\":\"machines1\",\"fromId\":\"740011e0-fce7-49cb-84c9-244fd52de0b5\"},{\"originalName\":\"[Added column]\",\"mergedName\":\"reportingMachines\",\"fromId\":null,\"isNewItem\":true,\"newItemData\":[{\"criteriaContext\":{\"leftOperand\":\"machines\",\"operator\":\"isNotNull\",\"rightValType\":\"column\",\"resultValType\":\"column\",\"resultVal\":\"machines\"}},{\"criteriaContext\":{\"operator\":\"Default\",\"rightValType\":\"column\",\"resultValType\":\"column\",\"resultVal\":\"machines1\"}}]}]}",
                        "size": 1,
                        "title": "Workspaces grouped by Defender solution status (used by Defender for Cloud)",
                        "queryType": 7,
                        "gridSettings": {
                          "formatters": [
                            {
                              "columnMatch": "Workspace name",
                              "formatter": 0,
                              "formatOptions": {
                                "customColumnWidthSetting": "64ch"
                              }
                            },
                            {
                              "columnMatch": "resourceId",
                              "formatter": 5
                            },
                            {
                              "columnMatch": "ServerSolution",
                              "formatter": 18,
                              "formatOptions": {
                                "thresholdsOptions": "icons",
                                "thresholdsGrid": [
                                  {
                                    "operator": "==",
                                    "thresholdValue": "Healthy",
                                    "representation": "success",
                                    "text": "{0}{1}"
                                  },
                                  {
                                    "operator": "==",
                                    "thresholdValue": "Unhealthy",
                                    "representation": "3",
                                    "text": "{0}{1}"
                                  },
                                  {
                                    "operator": "Default",
                                    "thresholdValue": null,
                                    "representation": "cancelled",
                                    "text": "Not applicable"
                                  }
                                ]
                              }
                            },
                            {
                              "columnMatch": "machines",
                              "formatter": 5
                            },
                            {
                              "columnMatch": "resourceId1",
                              "formatter": 5
                            },
                            {
                              "columnMatch": "SQLSolution",
                              "formatter": 18,
                              "formatOptions": {
                                "thresholdsOptions": "icons",
                                "thresholdsGrid": [
                                  {
                                    "operator": "==",
                                    "thresholdValue": "Healthy",
                                    "representation": "success",
                                    "text": "{0}{1}"
                                  },
                                  {
                                    "operator": "==",
                                    "thresholdValue": "Unhealthy",
                                    "representation": "3",
                                    "text": "{0}{1}"
                                  },
                                  {
                                    "operator": "Default",
                                    "thresholdValue": null,
                                    "representation": "cancelled",
                                    "text": "Not applicable"
                                  }
                                ]
                              }
                            },
                            {
                              "columnMatch": "machines1",
                              "formatter": 5
                            }
                          ],
                          "filter": true,
                          "labelSettings": [
                            {
                              "columnId": "ServerSolution",
                              "label": "Defender for Servers"
                            },
                            {
                              "columnId": "SQLSolution",
                              "label": "Defender for SQL"
                            },
                            {
                              "columnId": "reportingMachines",
                              "label": "Number of machines reporting"
                            }
                          ]
                        },
                        "sortBy": []
                      },
                      "customWidth": "70",
                      "showPin": false,
                      "name": "workspaceByDefenderSolution",
                      "styleSettings": {
                        "showBorder": true
                      }
                    }
                  ]
                },
                "name": "workspaceOverview",
                "styleSettings": {
                  "margin": "400",
                  "showBorder": true
                }
              },
              {
                "type": 12,
                "content": {
                  "version": "NotebookGroup/1.0",
                  "groupType": "editable",
                  "title": "Log Analytics agents currently not reporting",
                  "items": [
                    {
                      "type": 1,
                      "content": {
                        "json": "Microsoft Defender for Servers and Microsoft Defender for SQL rely on the Log Analytics agent to gather evidence for malicious behavior occurring on your machines. In case an agent is not properly reporting to its Log Analytics workspace, there might be a communication issue that prevents Microsoft Defender for Cloud from reporting threats.\nThe table below shows machines that have not been reporting to their workspaces for more than 15 minutes, with the least recent timestamp on top of the table. Machines that have not been reporting for more than 30 days are not shown.",
                        "style": "info"
                      },
                      "name": "text - 2"
                    },
                    {
                      "type": 3,
                      "content": {
                        "version": "KqlItem/1.0",
                        "query": "Heartbeat\n| where ResourceProvider in ('Microsoft.Compute', 'Microsoft.Hybridcompute')\n    and not(ResourceType =~ 'virtualMachineScaleSets')\n    and tostring(\"{subscriptions:subscriptionid}\") contains SubscriptionId\n| join kind = leftanti (\n    Heartbeat\n    | where ResourceProvider in ('Microsoft.Compute', 'Microsoft.Hybridcompute')\n        and not(ResourceType =~ 'virtualMachineScaleSets')\n        and tostring(\"{subscriptions:subscriptionid}\") contains SubscriptionId\n        and TimeGenerated > now() -15m\n) on _ResourceId\n| extend DefenderForServersStatus = case (\n    Solutions has \"security\", \"enabled\", \"disabled\"\n    ), DefenderForSqlStatus = case (\n    Solutions has \"sqlAdvancedThreatProtection\", \"enabled\", \"disabled\"\n    ),\n    Elapsed = datetime_diff('minute', now(), TimeGenerated)\n| summarize arg_max(LatestTimestamp=TimeGenerated, Elapsed, SubscriptionId, DefenderForServersStatus, DefenderForSqlStatus) by ResourceId\n| order by LatestTimestamp asc",
                        "size": 3,
                        "showAnalytics": true,
                        "noDataMessage": "No machines found not reporting for more than 15 minutes.",
                        "timeContext": {
                          "durationMs": 2592000000
                        },
                        "queryType": 0,
                        "resourceType": "microsoft.operationalinsights/workspaces",
                        "crossComponentResources": [
                          "{workspace}"
                        ],
                        "visualization": "table",
                        "gridSettings": {
                          "formatters": [
                            {
                              "columnMatch": "LatestTimestamp",
                              "formatter": 0,
                              "formatOptions": {
                                "customColumnWidthSetting": "21ch"
                              }
                            },
                            {
                              "columnMatch": "Elapsed",
                              "formatter": 8,
                              "formatOptions": {
                                "max": 21600,
                                "palette": "greenRed",
                                "compositeBarSettings": {
                                  "labelText": "",
                                  "columnSettings": []
                                }
                              },
                              "numberFormat": {
                                "unit": 25,
                                "options": {
                                  "style": "decimal"
                                }
                              },
                              "dateFormat": {
                                "formatName": null
                              }
                            },
                            {
                              "columnMatch": "SubscriptionId",
                              "formatter": 0,
                              "formatOptions": {
                                "customColumnWidthSetting": "38ch"
                              }
                            },
                            {
                              "columnMatch": "DefenderForServersStatus",
                              "formatter": 18,
                              "formatOptions": {
                                "thresholdsOptions": "icons",
                                "thresholdsGrid": [
                                  {
                                    "operator": "==",
                                    "thresholdValue": "enabled",
                                    "representation": "success",
                                    "text": "{0}{1}"
                                  },
                                  {
                                    "operator": "Default",
                                    "thresholdValue": null,
                                    "representation": "3",
                                    "text": "{0}{1}"
                                  }
                                ]
                              }
                            },
                            {
                              "columnMatch": "DefenderForSqlStatus",
                              "formatter": 18,
                              "formatOptions": {
                                "thresholdsOptions": "icons",
                                "thresholdsGrid": [
                                  {
                                    "operator": "==",
                                    "thresholdValue": "enabled",
                                    "representation": "success",
                                    "text": "{0}{1}"
                                  },
                                  {
                                    "operator": "Default",
                                    "thresholdValue": null,
                                    "representation": "3",
                                    "text": "{0}{1}"
                                  }
                                ]
                              }
                            }
                          ],
                          "rowLimit": 1000,
                          "labelSettings": [
                            {
                              "columnId": "ResourceId",
                              "label": "Resource ID"
                            },
                            {
                              "columnId": "LatestTimestamp",
                              "label": "Latest Heartbeat"
                            },
                            {
                              "columnId": "Elapsed",
                              "label": "Not reporting for [timerange]"
                            },
                            {
                              "columnId": "SubscriptionId",
                              "label": "Subscription ID"
                            },
                            {
                              "columnId": "DefenderForServersStatus",
                              "label": "Defender for Servers (workspace)"
                            },
                            {
                              "columnId": "DefenderForSqlStatus",
                              "label": "Defender for SQL (workspace)"
                            }
                          ]
                        },
                        "mapSettings": {
                          "locInfo": "AzureResource",
                          "locInfoColumn": "ResourceId"
                        }
                      },
                      "conditionalVisibility": {
                        "parameterName": "blank",
                        "comparison": "isNotEqualTo"
                      },
                      "name": "query - 0",
                      "styleSettings": {
                        "showBorder": true
                      }
                    },
                    {
                      "type": 3,
                      "content": {
                        "version": "KqlItem/1.0",
                        "query": "resources\n| where type =~ \"microsoft.compute/virtualMachines\"\n| extend powerState = properties.extended.instanceView.powerState.displayStatus\n| project resourceId = tolower(id), tostring(powerState)\n",
                        "size": 4,
                        "queryType": 1,
                        "resourceType": "microsoft.resourcegraph/resources",
                        "crossComponentResources": [
                          "{subscriptions}"
                        ],
                        "gridSettings": {
                          "rowLimit": 1000
                        }
                      },
                      "customWidth": "10",
                      "conditionalVisibility": {
                        "parameterName": "blank",
                        "comparison": "isNotEqualTo"
                      },
                      "name": "powerState"
                    },
                    {
                      "type": 3,
                      "content": {
                        "version": "KqlItem/1.0",
                        "query": "{\"version\":\"Merge/1.0\",\"merges\":[{\"id\":\"aed6097e-d9b1-41a1-89ac-542fb6bdf165\",\"mergeType\":\"leftouter\",\"leftTable\":\"query - 0\",\"rightTable\":\"powerState\",\"leftColumn\":\"ResourceId\",\"rightColumn\":\"resourceId\"}],\"projectRename\":[{\"originalName\":\"[query - 0].ResourceId\",\"mergedName\":\"Resource ID\",\"fromId\":\"aed6097e-d9b1-41a1-89ac-542fb6bdf165\"},{\"originalName\":\"[query - 0].LatestTimestamp\",\"mergedName\":\"Latest Heartbeat\",\"fromId\":\"aed6097e-d9b1-41a1-89ac-542fb6bdf165\"},{\"originalName\":\"[query - 0].Elapsed\",\"mergedName\":\"Not reporting for [timerange]\",\"fromId\":\"aed6097e-d9b1-41a1-89ac-542fb6bdf165\"},{\"originalName\":\"[powerState].powerState\",\"mergedName\":\"powerState\",\"fromId\":\"aed6097e-d9b1-41a1-89ac-542fb6bdf165\"},{\"originalName\":\"[query - 0].SubscriptionId\",\"mergedName\":\"Subscription ID\",\"fromId\":\"aed6097e-d9b1-41a1-89ac-542fb6bdf165\"},{\"originalName\":\"[query - 0].DefenderForServersStatus\",\"mergedName\":\"Defender for Servers (workspace)\",\"fromId\":\"aed6097e-d9b1-41a1-89ac-542fb6bdf165\"},{\"originalName\":\"[query - 0].DefenderForSqlStatus\",\"mergedName\":\"Defender for SQL (workspace)\",\"fromId\":\"aed6097e-d9b1-41a1-89ac-542fb6bdf165\"},{\"originalName\":\"[powerState].resourceId\",\"mergedName\":\"resourceId\",\"fromId\":\"aed6097e-d9b1-41a1-89ac-542fb6bdf165\"}]}",
                        "size": 3,
                        "queryType": 7,
                        "gridSettings": {
                          "formatters": [
                            {
                              "columnMatch": "Not reporting for [timerange]",
                              "formatter": 8,
                              "formatOptions": {
                                "max": 21600,
                                "palette": "greenRed"
                              },
                              "numberFormat": {
                                "unit": 25,
                                "options": {
                                  "style": "decimal"
                                }
                              }
                            },
                            {
                              "columnMatch": "powerState",
                              "formatter": 18,
                              "formatOptions": {
                                "thresholdsOptions": "icons",
                                "thresholdsGrid": [
                                  {
                                    "operator": "contains",
                                    "thresholdValue": "deallocated",
                                    "representation": "stopped",
                                    "text": "{0}{1}"
                                  },
                                  {
                                    "operator": "contains",
                                    "thresholdValue": "running",
                                    "representation": "success",
                                    "text": "{0}{1}"
                                  },
                                  {
                                    "operator": "contains",
                                    "thresholdValue": "starting",
                                    "representation": "pending",
                                    "text": "{0}{1}"
                                  },
                                  {
                                    "operator": "contains",
                                    "thresholdValue": "stopping",
                                    "representation": "pending",
                                    "text": "{0}{1}"
                                  },
                                  {
                                    "operator": "Default",
                                    "thresholdValue": null,
                                    "representation": "unknown",
                                    "text": "{0}{1}"
                                  }
                                ]
                              }
                            },
                            {
                              "columnMatch": "Defender for Servers (workspace)",
                              "formatter": 18,
                              "formatOptions": {
                                "thresholdsOptions": "icons",
                                "thresholdsGrid": [
                                  {
                                    "operator": "==",
                                    "thresholdValue": "enabled",
                                    "representation": "success",
                                    "text": "{0}{1}"
                                  },
                                  {
                                    "operator": "Default",
                                    "thresholdValue": null,
                                    "representation": "3",
                                    "text": "{0}{1}"
                                  }
                                ]
                              }
                            },
                            {
                              "columnMatch": "Defender for SQL (workspace)",
                              "formatter": 18,
                              "formatOptions": {
                                "thresholdsOptions": "icons",
                                "thresholdsGrid": [
                                  {
                                    "operator": "==",
                                    "thresholdValue": "enabled",
                                    "representation": "success",
                                    "text": "{0}{1}"
                                  },
                                  {
                                    "operator": "Default",
                                    "thresholdValue": null,
                                    "representation": "3",
                                    "text": "{0}{1}"
                                  }
                                ]
                              }
                            },
                            {
                              "columnMatch": "resourceId",
                              "formatter": 5
                            }
                          ],
                          "sortBy": [
                            {
                              "itemKey": "$gen_heatmap_Not reporting for [timerange]_2",
                              "sortOrder": 2
                            }
                          ],
                          "labelSettings": [
                            {
                              "columnId": "powerState",
                              "label": "Power State"
                            }
                          ]
                        },
                        "sortBy": [
                          {
                            "itemKey": "$gen_heatmap_Not reporting for [timerange]_2",
                            "sortOrder": 2
                          }
                        ]
                      },
                      "showPin": false,
                      "name": "query - 2"
                    }
                  ]
                },
                "name": "agentsNotReporting",
                "styleSettings": {
                  "showBorder": true
                }
              }
            ]
          },
          "conditionalVisibilities": [
            {
              "parameterName": "SelectedTab",
              "comparison": "isEqualTo",
              "value": "LogAnalyticsTab"
            },
            {
              "parameterName": "workspace",
              "comparison": "isNotEqualTo"
            }
          ],
          "name": "LogAnalyticsStatus"
        },
        {
          "type": 12,
          "content": {
            "version": "NotebookGroup/1.0",
            "groupType": "editable",
            "title": "Protection Status",
            "items": [
              {
                "type": 1,
                "content": {
                  "json": "This table is a representation of all machines that are protected by Microsoft Defender for Cloud, independently from the plan or agent reporting status.\nYou can use the search bar to filter for any field.",
                  "style": "info"
                },
                "name": "text - 1"
              },
              {
                "type": 3,
                "content": {
                  "version": "KqlItem/1.0",
                  "query": "securityresources\n| where type =~ \"microsoft.security/assessments\" or type =~ \"microsoft.security/softwareInventories\"\n| extend assessmentStatusCode = case(type =~ \"microsoft.security/assessments\", tostring(properties.status.code), \"\")\n| extend severity = case(assessmentStatusCode =~ \"unhealthy\", tolower(tostring(properties.metadata.severity)), tolower(assessmentStatusCode))\n| extend exemptionType = case(tolower(type) != \"microsoft.security/assessments\",\"N/A\", case(properties.status.cause =~ \"exempt\", \"Yes\", \"No\"))\n| extend source = case(type =~ \"microsoft.security/assessments\", tostring(properties.resourceDetails.Source), \"\")\n| extend stringUntilWorkspaces = extract(\"^(.+)/(.+)/onPremiseMachines/(.+)/providers/Microsoft.Security/assessments/.+$\",1,id)\n| extend resourceId = trim(\" \", tolower(tostring(case(source =~ \"azure\", properties.resourceDetails.Id,\n                                                                            source =~ \"aws\" and isnotempty(tostring(properties.resourceDetails.ConnectorId)), properties.resourceDetails.Id,\n                                                                            source =~ \"aws\", properties.resourceDetails.AzureResourceId,\n                                                                            source =~ \"gcp\", properties.resourceDetails.AzureResourceId,\n                                                                            source =~ \"onpremise\", strcat(stringUntilWorkspaces,\"/workspaceNamePlaceholder/onPremiseMachines/\",properties.resourceDetails.MachineName,\"_\",properties.resourceDetails.VMUUID),\n                                                                            type =~ \"microsoft.security/assessments\", extract(\"^(.+)/providers/Microsoft.Security/assessments/.+$\",1,id),extract(\"^(.+)/providers/Microsoft.Security/softwareInventories/.+$\",1,id)))))\n| extend resourceName = iff(source =~ \"aws\" and isnotempty(tostring(properties.resourceDetails.ConnectorId)), tostring(properties.additionalData.ResourceName), extract(@\"(.+)/(.+)\", 2, resourceId))\n| extend regexResourceId = extract_all(@\"/providers/([^/]+)(?:/([^/]+)/[^/]+(?:/([^/]+)/[^/]+)?)?/([^/]+)/[^/]+$\", resourceId)\n| extend RegexResourceType = regexResourceId[0]\n| extend mainType = RegexResourceType[1], extendedType = RegexResourceType[2], resourceType = RegexResourceType[3]\n| extend providerName = RegexResourceType[0],\n                        mainType = case(mainType !~ \"\", strcat(\"/\",mainType), \"\"),\n                        extendedType = case(extendedType!~ \"\", strcat(\"/\",extendedType), \"\"),\n                        resourceType = case(resourceType!~ \"\", strcat(\"/\",resourceType), \"\")\n| extend array = split(resourceId, '/')\n| extend typeFullPath = case(\n                    array_length(array) == 3, 'subscription',\n                    array_length(array) == 5, 'resourcegroups',\n                    source =~ \"aws\" and isnotempty(tostring(properties.resourceDetails.ConnectorId)), tolower(strcat(providerName, mainType, \"/\", tostring(properties.additionalData.ResourceProvider), tostring(properties.additionalData.ResourceType))),\n                    strcat(providerName, mainType, extendedType, resourceType))\n| extend resourceType = case(typeFullPath =~ 'resourcegroups' or typeFullPath =~ 'subscription', typeFullPath, tolower(trim(\"/\", resourceType)))\n| extend assessmentKey = case(type =~ \"microsoft.security/assessments\", tostring(name), \"\")\n| extend softwareVendorName = case(type =~ \"microsoft.security/softwareInventories\", tostring(properties.vendor), \"\")\n| extend softwareName = case(type =~ \"microsoft.security/softwareInventories\", tostring(properties.softwareName), \"\")\n| extend softwareVersion = case(type =~ \"microsoft.security/softwareInventories\", tostring(properties.version), \"\")\n| extend softwareNameIdentifier = case(type =~ \"microsoft.security/softwareInventories\", strcat(softwareVendorName, \",\", softwareName, \",\", softwareVersion), \"\")\n| extend environment = case(type =~ \"microsoft.security/assessments\", properties.resourceDetails[\"Source\"], \"\")\n| extend environment = case(environment =~ \"onpremise\", tolower(\"Non-Azure\"), tolower(environment))\n| extend osTypeProperty = properties.additionalData[\"OS Type\"]\n| extend osType = case(isnotempty(osTypeProperty), osTypeProperty, \"\")\n| extend hasAgent = case(assessmentKey == \"d1db3318-01ff-16de-29eb-28b344515626\" or assessmentKey == \"45cfe080-ceb1-a91e-9743-71551ed24e94\" or assessmentKey == \"720a3e77-0b9a-4fa9-98b6-ddf0fd7e32c1\" or assessmentKey == \"27ac71b1-75c5-41c2-adc2-858f5db45b08\", assessmentStatusCode, \"\")\n| extend hasAgent = case(((assessmentKey == \"4ab6e3c5-74dd-8b35-9ab9-f61b30875b27\" or assessmentKey == \"181ac480-f7c4-544b-9865-11b8ffe87f47\" or assessmentKey == \"4fb67663-9ab9-475d-b026-8c544cced439\") and (typeFullPath in ('microsoft.hybridcompute/machines', 'microsoft.kubernetes/connectedclusters'))) , \"healthy\", hasAgent)\n| extend workspaceAzureResourceId = case(hasAgent !~ \"\", properties.additionalData[\"Reporting workspace azure id\"], \"\")\n| extend workspaceName = case(workspaceAzureResourceId !~ \"\", extract(@\"(.+)/(.+)\", 2, workspaceAzureResourceId), \"\")\n| extend assessmentDisplayName = case(type =~ \"microsoft.security/assessments\", case(isnotempty(properties.displayName), properties.displayName, properties.metadata.displayName), \"\")\n| extend assessmentIdentifier = case(type =~ \"microsoft.security/assessments\", strcat(assessmentKey, \",\" , assessmentDisplayName, \",\", severity), \"\")\n| summarize assessmentsCount = count() , assessmentsIdentifier = make_list(assessmentIdentifier), softwareNamesIdentifier = make_list(softwareNameIdentifier), hasAgent = max(hasAgent), workspaceName = max(workspaceName), environment = max(environment), osType = max(osType), exemptionType = max(exemptionType)  by resourceId, subscriptionId, resourceName, resourceType, typeFullPath, severity\n| extend packAssessments = pack(severity, assessmentsCount)\n| summarize assessmentsSummary = make_bag(packAssessments), assessmentsIdentifier = make_set(assessmentsIdentifier), softwareNamesIdentifier = make_set(softwareNamesIdentifier), hasAgent = max(hasAgent), workspaceName= max(workspaceName), environment = max(environment), osType= max(osType), exemptionType = max(exemptionType)  by resourceId, subscriptionId, resourceName, resourceType, typeFullPath\n| extend agentMonitoring = case(hasAgent =~ \"NotApplicable\" or hasAgent =~ \"\", '',\n                                                hasAgent =~ \"Unhealthy\", \"notInstalled\",\n                                                \"installed\")\n| join kind=leftouter (\n                    securityresources\n                    | where type =~ \"microsoft.security/pricings\"\n                    | project subscriptionId, bundleName = tolower(name), freeTrialRemainingTime = properties.freeTrialRemainingTime, pricingTier = tolower(properties.pricingTier)\n                    | extend bundlesPricing = pack(bundleName, pricingTier)\n                    | summarize subscriptionPricing = make_bag(bundlesPricing) by subscriptionId\n                ) on subscriptionId\n| extend hasNoSoftwareData = case(array_length(softwareNamesIdentifier) == 1, case(set_has_element(softwareNamesIdentifier, \"\"), true, false), false)\n| extend softwareNamesIdentifier = case(hasNoSoftwareData, softwareNamesIdentifier, set_difference(softwareNamesIdentifier, pack_array(\"\")))\n| extend AssessmentsHigh = case(isnull(assessmentsSummary.high), 0 , toint(assessmentsSummary.high))\n| extend AssessmentsMedium = case(isnull(assessmentsSummary.medium), 0 , toint(assessmentsSummary.medium))\n| extend AssessmentsLow = case(isnull(assessmentsSummary.low), 0 , toint(assessmentsSummary.low))\n| extend unhealthyAssessmentsCount = AssessmentsHigh + AssessmentsMedium + AssessmentsLow\n| extend virtualmachines = case(isnull(subscriptionPricing), '' , subscriptionPricing.virtualmachines)\n| extend virtualmachines = case(virtualmachines == 'free', 'off', 'on')\n| extend sqlservers = case(isnull(subscriptionPricing), '' , subscriptionPricing.sqlservers)\n| extend sqlservers = case(sqlservers == 'free', 'off', 'on')\n| extend kubernetesservice = case(isnull(subscriptionPricing), '' , subscriptionPricing.kubernetesservice)\n| extend kubernetesservice = case(kubernetesservice == 'free', 'off', 'on')\n| extend containerregistry = case(isnull(subscriptionPricing), '' , subscriptionPricing.containerregistry)\n| extend containerregistry = case(containerregistry == 'free', 'off', 'on')\n| extend connectedcontainerregistry = case(isnull(subscriptionPricing), '' , subscriptionPricing.connectedcontainerregistry)\n| extend connectedcontainerregistry = case(connectedcontainerregistry == 'free', 'off', 'on')\n| extend sqlservervirtualmachines = case(isnull(subscriptionPricing), '' , subscriptionPricing.sqlservervirtualmachines)\n| extend sqlservervirtualmachines = case(sqlservervirtualmachines == 'free', 'off', 'on')\n| extend appservices = case(isnull(subscriptionPricing), '' , subscriptionPricing.appservices)\n| extend appservices = case(appservices == 'free', 'off', 'on')\n| extend storageaccounts = case(isnull(subscriptionPricing), '' , subscriptionPricing.storageaccounts)\n| extend storageaccounts = case(storageaccounts == 'free', 'off', 'on')\n| extend keyvaults = case(isnull(subscriptionPricing), '' , subscriptionPricing.keyvaults)\n| extend keyvaults = case(keyvaults == 'free', 'off', 'on')\n| extend opensourcerelationaldatabases = case(isnull(subscriptionPricing), '' , subscriptionPricing.opensourcerelationaldatabases)\n| extend opensourcerelationaldatabases = case(opensourcerelationaldatabases == 'free', 'off', 'on')\n| extend calculatedSubscriptionPricing = case(resourceType =~ \"subscription\" and isempty(subscriptionPricing) == false , iff(subscriptionPricing has \"free\" and subscriptionPricing has \"standard\", \"partial\", iff(subscriptionPricing has \"free\", \"off\", \"on\")), \"\")\n| extend resourcePricing = case(typeFullPath =~ \"microsoft.classiccompute/virtualmachines\", virtualmachines, typeFullPath =~ \"microsoft.compute/virtualmachines\", virtualmachines, typeFullPath =~ \"microsoft.hybridcompute/machines\", virtualmachines, typeFullPath =~ \"microsoft.sql/servers\", sqlservers, typeFullPath =~ \"microsoft.containerservice/managedclusters\", kubernetesservice, typeFullPath =~ \"microsoft.kubernetes/connectedclusters\", kubernetesservice, typeFullPath =~ \"microsoft.containerregistry/registries\", containerregistry, typeFullPath =~ \"microsoft.security/connectedcontainerregistries\", connectedcontainerregistry, typeFullPath =~ \"microsoft.sqlvirtualmachine/sqlvirtualmachines\", sqlservervirtualmachines, typeFullPath =~ \"microsoft.web/sites\", appservices, typeFullPath =~ \"microsoft.storage/storageaccounts\", storageaccounts, typeFullPath =~ \"microsoft.compute/virtualmachinescalesets\", virtualmachines, typeFullPath =~ \"microsoft.keyvault/vaults\", keyvaults, typeFullPath =~ \"microsoft.dbforpostgresql/servers\", opensourcerelationaldatabases, typeFullPath =~ \"microsoft.dbformysql/servers\", opensourcerelationaldatabases, typeFullPath =~ \"microsoft.dbformariadb/servers\", opensourcerelationaldatabases, calculatedSubscriptionPricing)\n| extend pricing = case(resourceType =~ \"subscription\" , calculatedSubscriptionPricing , resourcePricing)\n| extend selectedSoftware = \"\"\n| project resourceType, exemptionType, typeFullPath, resourceId, resourceName, subscriptionId, environment, osType, workspaceName, agentMonitoring, assessmentsIdentifier, assessmentsSummary, subscriptionPricing, unhealthyAssessmentsCount, pricing, softwareNamesIdentifier, selectedSoftware\n| extend resourceGroup = tolower(tostring(split(resourceId, \"/\")[4]))\n| order by unhealthyAssessmentsCount, subscriptionId, resourceType, resourceId\n| where typeFullPath in ('microsoft.compute/virtualmachines', 'microsoft.hybridcompute/machines')\n| where isnotempty(resourceId)",
                  "size": 3,
                  "showAnalytics": true,
                  "queryType": 1,
                  "resourceType": "microsoft.resourcegraph/resources",
                  "crossComponentResources": [
                    "{subscriptions}"
                  ],
                  "visualization": "table",
                  "showExpandCollapseGrid": true,
                  "gridSettings": {
                    "formatters": [
                      {
                        "columnMatch": "resourceType",
                        "formatter": 5
                      },
                      {
                        "columnMatch": "exemptionType",
                        "formatter": 5
                      },
                      {
                        "columnMatch": "typeFullPath",
                        "formatter": 5
                      },
                      {
                        "columnMatch": "resourceName",
                        "formatter": 5
                      },
                      {
                        "columnMatch": "agentMonitoring",
                        "formatter": 18,
                        "formatOptions": {
                          "thresholdsOptions": "icons",
                          "thresholdsGrid": [
                            {
                              "operator": "==",
                              "thresholdValue": "installed",
                              "representation": "success",
                              "text": "{0}{1}"
                            },
                            {
                              "operator": "==",
                              "thresholdValue": "Unhealthy",
                              "representation": "2",
                              "text": "{0}{1}"
                            },
                            {
                              "operator": "==",
                              "thresholdValue": "NotApplicable",
                              "representation": "cancelled",
                              "text": "{0}{1}"
                            },
                            {
                              "operator": "==",
                              "thresholdValue": "notInstalled",
                              "representation": "disabled",
                              "text": "{0}{1}"
                            },
                            {
                              "operator": "==",
                              "text": "{0}{1}"
                            },
                            {
                              "operator": "Default",
                              "thresholdValue": null,
                              "representation": "Disable",
                              "text": "{0}{1}"
                            }
                          ]
                        }
                      },
                      {
                        "columnMatch": "assessmentsIdentifier",
                        "formatter": 5
                      },
                      {
                        "columnMatch": "assessmentsSummary",
                        "formatter": 5
                      },
                      {
                        "columnMatch": "subscriptionPricing",
                        "formatter": 5
                      },
                      {
                        "columnMatch": "unhealthyAssessmentsCount",
                        "formatter": 3,
                        "formatOptions": {
                          "min": 0,
                          "max": 15,
                          "palette": "greenRed"
                        }
                      },
                      {
                        "columnMatch": "pricing",
                        "formatter": 18,
                        "formatOptions": {
                          "thresholdsOptions": "icons",
                          "thresholdsGrid": [
                            {
                              "operator": "==",
                              "thresholdValue": "on",
                              "representation": "success",
                              "text": "{0}{1}"
                            },
                            {
                              "operator": "==",
                              "thresholdValue": "off",
                              "representation": "disabled",
                              "text": "{0}{1}"
                            },
                            {
                              "operator": "Default",
                              "thresholdValue": null,
                              "representation": "disabled",
                              "text": "{0}{1}"
                            }
                          ]
                        }
                      },
                      {
                        "columnMatch": "softwareNamesIdentifier",
                        "formatter": 5
                      },
                      {
                        "columnMatch": "selectedSoftware",
                        "formatter": 5
                      },
                      {
                        "columnMatch": "resourceGroup",
                        "formatter": 5
                      }
                    ],
                    "rowLimit": 1000,
                    "filter": true,
                    "labelSettings": [
                      {
                        "columnId": "exemptionType",
                        "label": "Resource Exemption exists"
                      },
                      {
                        "columnId": "resourceId",
                        "label": "Resource ID"
                      },
                      {
                        "columnId": "subscriptionId",
                        "label": "Subscription ID"
                      },
                      {
                        "columnId": "environment",
                        "label": "Environment"
                      },
                      {
                        "columnId": "osType",
                        "label": "OS Type"
                      },
                      {
                        "columnId": "workspaceName",
                        "label": "Workspace Name"
                      },
                      {
                        "columnId": "agentMonitoring",
                        "label": "Log Analytics agent status"
                      },
                      {
                        "columnId": "unhealthyAssessmentsCount",
                        "label": "Open Recommendations"
                      },
                      {
                        "columnId": "pricing",
                        "label": "Defender status (subscription)"
                      }
                    ]
                  }
                },
                "name": "query - 0",
                "styleSettings": {
                  "showBorder": true
                }
              }
            ]
          },
          "conditionalVisibility": {
            "parameterName": "SelectedTab",
            "comparison": "isEqualTo",
            "value": "SecurityTab"
          },
          "name": "protectionStatus",
          "styleSettings": {
            "showBorder": true
          }
        }
      ],
      "isLocked": false,
      "fallbackResourceIds": [
        "Azure Security Center"
      ],
      "fromTemplateId": "asc-ServersMonitoringDashboard"
    }
  },
  "resources": [
    {
      "name": "[parameters('workbookId')]",
      "type": "microsoft.insights/workbooks",
      "location": "[resourceGroup().location]",
      "apiVersion": "2021-03-08",
      "dependsOn": [],
      "kind": "shared",
      "properties": {
        "displayName": "[parameters('workbookDisplayName')]",
        "serializedData": "[string(variables('workbookContent'))]",
        "version": "1.0",
        "sourceId": "[parameters('workbookSourceId')]",
        "category": "[parameters('workbookType')]"
      }
    }
  ],
  "outputs": {
    "workbookId": {
      "type": "string",
      "value": "[resourceId( 'microsoft.insights/workbooks', parameters('workbookId'))]"
    }
  },
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
}